/// <reference path="../node_modules/rx/ts/rx.all.d.ts" />
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
var Ax = require("../src/animaxe");
var Rx = require("rx");
var helper = require("./helper");
var animator = helper.getExampleAnimator();
//2 frame animated glow
function spark(css_color) {
    var css = Ax.toStreamColor(css_color);
    return Ax.take(1, Ax.draw(function (tick) {
        console.log("spark: frame1", css.next(tick.clock));
        tick.ctx.fillStyle = css.next(tick.clock);
        tick.ctx.fillRect(-2, -2, 5, 5);
    })).then(Ax.take(1, Ax.draw(function (tick) {
        console.log("spark: frame2", css.next(tick.clock));
        tick.ctx.fillStyle = css.next(tick.clock);
        tick.ctx.fillRect(-1, -1, 3, 3);
    })));
}
function sparkLong(css_color) {
    return Ax.draw(function (tick) {
        console.log("sparkLong", css_color);
        tick.ctx.fillStyle = css_color;
        tick.ctx.fillRect(-1, -1, 3, 3);
    });
}
//large circle funcitons
var bigSin = Ax.sin(1).map(function (x) { return x * 40 + 50; });
var bigCos = Ax.cos(1).map(function (x) { return x * 40 + 50; });
var red = Ax.sin(2).map(function (x) { return x * 125 + 125; });
var green = Ax.sin(2).map(function (x) { return x * 55 + 200; });
animator.play(Ax.changeColor("#000000", Ax.rect([0, 0], [100, 100]))); //draw black background
animator.play(Ax.loop(Ax.move(Ax.point(bigSin, bigCos), spark(Ax.color(red, green, 0, 0.5))))); //spinning spark forever
animator.play(Ax.move([50, 50], Ax.velocity([50, 0], Ax.loop(spark("#FFFFFF"))))); //constant move
animator.play(Ax.tween_linear([50, 50], Ax.point(bigSin, bigCos), 1, Ax.loop(spark("red")))); //spiral 1 second
try {
    //browser
    var time;
    var render = function () {
        window.requestAnimationFrame(render);
        var now = new Date().getTime(), dt = now - (time || now);
        time = now;
        animator.root.onNext(new Ax.DrawTick(animator.ctx, dt / 1000, 0));
    };
    render();
}
catch (err) {
    //node.js
    animator.play(Ax.save(100, 100, "images/tutorial1.gif"));
    animator.ticker(Rx.Observable.return(0.1).repeat(20));
}
helper.playExample("example1", 10, animator);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUxLnRzIl0sIm5hbWVzIjpbInNwYXJrIiwic3BhcmtMb25nIl0sIm1hcHBpbmdzIjoiQUFBQSxBQUdBLDBEQUgwRDtBQUMxRCw2Q0FBNkM7QUFDN0MsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hDLElBQU8sRUFBRSxXQUFXLGdCQUFnQixDQUFDLENBQUM7QUFDdEMsSUFBTyxFQUFFLFdBQVcsSUFBSSxDQUFDLENBQUM7QUFFMUIsSUFBTyxNQUFNLFdBQVcsVUFBVSxDQUFDLENBQUM7QUFHcEMsSUFBSSxRQUFRLEdBQWdCLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBR3hELEFBQ0EsdUJBRHVCO2VBQ1IsU0FBa0M7SUFDN0NBLElBQUlBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLGFBQWFBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBO0lBQ3RDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFTQSxJQUFpQkE7UUFDNUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUNKQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxVQUFTQSxJQUFpQkE7UUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDakMsQ0FBQyxDQUFDQSxDQUFDQSxDQUNOQSxDQUFDQTtBQUNOQSxDQUFDQTtBQUVELG1CQUFtQixTQUFpQjtJQUNoQ0MsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBU0EsSUFBaUJBO1FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckMsQ0FBQyxDQUFDQSxDQUFDQTtBQUNQQSxDQUFDQTtBQUVELEFBQ0Esd0JBRHdCO0lBQ3BCLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFYLENBQVcsQ0FBQyxDQUFDO0FBQzdDLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUM7QUFFN0MsSUFBSSxHQUFHLEdBQUssRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEdBQUcsR0FBRyxHQUFHLEdBQUcsRUFBYixDQUFhLENBQUMsQ0FBQztBQUM5QyxJQUFJLEtBQUssR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFaLENBQVksQ0FBQyxDQUFDO0FBRTdDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSx1QkFBdUI7QUFDM0YsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFDLEtBQUssRUFBQyxDQUFDLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSx3QkFBd0I7QUFDckgsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxlQUFlO0FBQ2hHLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDLEVBQUUsRUFBQyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsaUJBQWlCO0FBRzlHLElBQUksQ0FBQztJQUNELEFBQ0EsU0FEUztRQUNMLElBQUksQ0FBQztJQUNULElBQUksTUFBTSxHQUFHO1FBQ1QsTUFBTSxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLElBQUksR0FBRyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQzFCLEVBQUUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7UUFDN0IsSUFBSSxHQUFHLEdBQUcsQ0FBQztRQUNYLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLEVBQUUsR0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNwRSxDQUFDLENBQUM7SUFDRixNQUFNLEVBQUUsQ0FBQztBQUNiLENBQUU7QUFBQSxLQUFLLENBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ1YsQUFDQSxTQURTO0lBQ1QsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsc0JBQXNCLENBQUMsQ0FBQyxDQUFDO0lBQ3pELFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFDMUQsQ0FBQztBQUVELE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQyIsImZpbGUiOiJleGFtcGxlMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9ub2RlX21vZHVsZXMvcngvdHMvcnguYWxsLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL3Nob3VsZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9ub2RlLmQudHNcIiAvPlxucmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xuaW1wb3J0IEF4ID0gcmVxdWlyZShcIi4uL3NyYy9hbmltYXhlXCIpO1xuaW1wb3J0IFJ4ID0gcmVxdWlyZShcInJ4XCIpO1xuXG5pbXBvcnQgaGVscGVyID0gcmVxdWlyZShcIi4vaGVscGVyXCIpO1xuXG5cbnZhciBhbmltYXRvcjogQXguQW5pbWF0b3IgPSBoZWxwZXIuZ2V0RXhhbXBsZUFuaW1hdG9yKCk7XG5cblxuLy8yIGZyYW1lIGFuaW1hdGVkIGdsb3dcbmZ1bmN0aW9uIHNwYXJrKGNzc19jb2xvcjogc3RyaW5nIHwgQXguQ29sb3JTdHJlYW0pOiBBeC5BbmltYXRpb24geyAvL3dlIGNvdWxkIGJlIGNsZXZlciBhbmQgbGV0IHNwYXJrIHRha2UgYSBzZXEsIGJ1dCB1c2VyIGZ1bmN0aW9ucyBzaG91bGQgYmUgc2ltcGxlXG4gICAgdmFyIGNzcyA9IEF4LnRvU3RyZWFtQ29sb3IoY3NzX2NvbG9yKTtcbiAgICByZXR1cm4gQXgudGFrZSgxLCBBeC5kcmF3KGZ1bmN0aW9uKHRpY2s6IEF4LkRyYXdUaWNrKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInNwYXJrOiBmcmFtZTFcIiwgY3NzLm5leHQodGljay5jbG9jaykpO1xuICAgICAgICAgICAgdGljay5jdHguZmlsbFN0eWxlID0gY3NzLm5leHQodGljay5jbG9jayk7XG4gICAgICAgICAgICB0aWNrLmN0eC5maWxsUmVjdCgtMiwtMiw1LDUpO1xuICAgIH0pKS50aGVuKFxuICAgICAgICBBeC50YWtlKDEsIEF4LmRyYXcoZnVuY3Rpb24odGljazogQXguRHJhd1RpY2spIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic3Bhcms6IGZyYW1lMlwiLCBjc3MubmV4dCh0aWNrLmNsb2NrKSk7XG4gICAgICAgICAgICB0aWNrLmN0eC5maWxsU3R5bGUgPSBjc3MubmV4dCh0aWNrLmNsb2NrKTtcbiAgICAgICAgICAgIHRpY2suY3R4LmZpbGxSZWN0KC0xLC0xLDMsMyk7XG4gICAgICAgIH0pKVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIHNwYXJrTG9uZyhjc3NfY29sb3I6IHN0cmluZyk6IEF4LkFuaW1hdGlvbiB7IC8vd2UgY291bGQgYmUgY2xldmVyIGFuZCBsZXQgc3BhcmsgdGFrZSBhIHNlcSwgYnV0IHVzZXIgZnVuY3Rpb25zIHNob3VsZCBiZSBzaW1wbGVcbiAgICByZXR1cm4gQXguZHJhdyhmdW5jdGlvbih0aWNrOiBBeC5EcmF3VGljaykge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJzcGFya0xvbmdcIiwgY3NzX2NvbG9yKTtcbiAgICAgICAgICAgIHRpY2suY3R4LmZpbGxTdHlsZSA9IGNzc19jb2xvcjtcbiAgICAgICAgICAgIHRpY2suY3R4LmZpbGxSZWN0KC0xLC0xLDMsMyk7XG4gICAgfSk7XG59XG5cbi8vbGFyZ2UgY2lyY2xlIGZ1bmNpdG9uc1xudmFyIGJpZ1NpbiA9IEF4LnNpbigxKS5tYXAoeCA9PiB4ICogNDAgKyA1MCk7XG52YXIgYmlnQ29zID0gQXguY29zKDEpLm1hcCh4ID0+IHggKiA0MCArIDUwKTtcblxudmFyIHJlZCAgID0gQXguc2luKDIpLm1hcCh4ID0+IHggKiAxMjUgKyAxMjUpO1xudmFyIGdyZWVuID0gQXguc2luKDIpLm1hcCh4ID0+IHggKiA1NSArIDIwMCk7XG5cbmFuaW1hdG9yLnBsYXkoQXguY2hhbmdlQ29sb3IoXCIjMDAwMDAwXCIsIEF4LnJlY3QoWzAsMF0sWzEwMCwxMDBdKSkpOyAvL2RyYXcgYmxhY2sgYmFja2dyb3VuZFxuYW5pbWF0b3IucGxheShBeC5sb29wKEF4Lm1vdmUoQXgucG9pbnQoYmlnU2luLCBiaWdDb3MpLCBzcGFyayhBeC5jb2xvcihyZWQsZ3JlZW4sMCwwLjUpKSkpKTsgLy9zcGlubmluZyBzcGFyayBmb3JldmVyXG5hbmltYXRvci5wbGF5KEF4Lm1vdmUoWzUwLDUwXSwgQXgudmVsb2NpdHkoWzUwLDBdLCBBeC5sb29wKHNwYXJrKFwiI0ZGRkZGRlwiKSkpKSk7IC8vY29uc3RhbnQgbW92ZVxuYW5pbWF0b3IucGxheShBeC50d2Vlbl9saW5lYXIoWzUwLDUwXSwgQXgucG9pbnQoYmlnU2luLCBiaWdDb3MpLCAxLCBBeC5sb29wKHNwYXJrKFwicmVkXCIpKSkpOyAvL3NwaXJhbCAxIHNlY29uZFxuXG5cbnRyeSB7XG4gICAgLy9icm93c2VyXG4gICAgdmFyIHRpbWU7XG4gICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICAgIGR0ID0gbm93IC0gKHRpbWUgfHwgbm93KTtcbiAgICAgICAgdGltZSA9IG5vdztcbiAgICAgICAgYW5pbWF0b3Iucm9vdC5vbk5leHQobmV3IEF4LkRyYXdUaWNrKGFuaW1hdG9yLmN0eCwgZHQvMTAwMCwgMCkpO1xuICAgIH07XG4gICAgcmVuZGVyKCk7XG59IGNhdGNoKGVycikge1xuICAgIC8vbm9kZS5qc1xuICAgIGFuaW1hdG9yLnBsYXkoQXguc2F2ZSgxMDAsIDEwMCwgXCJpbWFnZXMvdHV0b3JpYWwxLmdpZlwiKSk7XG4gICAgYW5pbWF0b3IudGlja2VyKFJ4Lk9ic2VydmFibGUucmV0dXJuKDAuMSkucmVwZWF0KDIwKSk7XG59XG5cbmhlbHBlci5wbGF5RXhhbXBsZShcImV4YW1wbGUxXCIsIDEwLCBhbmltYXRvcik7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9