var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/Parameter");
var svg = require("../src/svg");
var animator = helper.getExampleAnimator(100, 100);
//each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
// TODO move to Parameter
function linearControl(initialValue, maxVelocity, targetValue) {
    console.log("build: linearControl");
    return Parameter.dt().combine(function () {
        var current = initialValue;
        return function (dt, target, maxVel) {
            var error = target - current;
            var velocity = error / dt;
            if (velocity > maxVel)
                velocity = maxVel;
            if (velocity < -maxVel)
                velocity = -maxVel;
            current += velocity * dt;
            return current;
        };
    }, Parameter.from(maxVelocity), Parameter.from(targetValue));
}
"OPEN" | "CLOSE" | "EXIT";
var Arrow = (function (_super) {
    __extends(Arrow, _super);
    function Arrow() {
        _super.apply(this, arguments);
    }
    return Arrow;
})(Ax.Operation);
// Simple arrow that points to (0,0)
// -->
function simpleArrow(stemWidth, stemLength, arrowWidth, arrowLength, speed, cb) {
    // some point we will have a tick -> command parameter
    var command = Parameter.constant("OPEN");
    // this gets merged with everything in order to update the various
    // linearControl signals
    // one change in state should change the target for several linearControl's
    // those controls are then piped into the SVG command.
    // KILL -1
    // CLOSE  0
    // .
    //  .
    //   .
    //   -
    //  --
    // ---
    // -->
    // OPEN    1
    // The intermediate representation is a number from 0 - 1
    // Its current state is moved in the direction of OPEN or CLOSE
    // at a linear speed
    var commandToIR = Parameter.sin(Parameter.t().combine(function () { return function (t, speed) {
        return t * Math.PI * 2 * speed;
    }; }, Parameter.from(speed))).mapValue(function (sin) { return sin / 2 + 0.5; });
    //     topOuter--+
    //               |\
    //  /topLeft     | \
    // +--------------  \
    // |                 +--tip
    // --------------+  /
    //              /| /
    //     botInner/ |/
    var stemLengthP = Parameter.from(stemLength);
    var stemWidthP = Parameter.from(stemWidth);
    var arrowWidthP = Parameter.from(arrowWidth);
    var arrowLengthP = Parameter.from(arrowLength);
    /**
     * Linear interpolation
     */
    function lerp(t, start, end) {
        return start + t * (end - start);
    }
    var moveToTopLeftDx = commandToIR.combine(function () { return function (t, stemLength, arrowLength, stemWidth) {
        return -stemLength - arrowLength;
    }; }, stemLengthP, arrowLengthP, stemWidthP);
    var moveToTopLeftDy = commandToIR.combine(function () { return function (t, stemLength, arrowLength, stemWidth) {
        return -stemWidth / 2;
    }; }, stemLengthP, arrowLengthP, stemWidthP);
    var liveStemLength = commandToIR.combine(function () { return function (t, stemLength, arrowLength) {
        return lerp(t, stemLength / 2, stemLength);
    }; }, stemLengthP, arrowLengthP);
    var liveOverhang = commandToIR.combine(function () { return function (t, stemWidth, arrowWidth) {
        return arrowWidth - stemWidth;
    }; }, stemWidthP, arrowWidthP);
    var liveTipDx = commandToIR.combine(function () { return function (t, stemWidth, arrowLength) {
        return arrowLength;
    }; }, stemWidthP, arrowLengthP);
    var liveTipDy = commandToIR.combine(function () { return function (t, stemWidth, arrowWidth) {
        return arrowWidth / 2;
    }; }, stemWidthP, arrowWidthP);
    var path = svg.svgpath(Ax.create().beginPath(), 'M%1 %2 h%3 v-%4 l%5 %6 l-%5 %6 v-%4 h-%3 z', moveToTopLeftDx, moveToTopLeftDy, liveStemLength, liveOverhang, liveTipDx, liveTipDy).fill();
    // The zero to 1 IR affets each line on an SVG animation
    var arrow = new Arrow(path.attach); // todo
    if (cb !== undefined)
        cb(arrow);
    return arrow;
}
// Using http://anthonydugois.com/svg-path-builder/
animator.play(Ax.create().translate([50, 50]).fillStyle("white").pipe(simpleArrow(3, 25, 5, 25, 2)));
helper.playExample("arrows", 10, animator, 100, 100);
describe('arrows', function () {
    it('should match the reference', function (done) {
        helper.sameExample("arrows", "arrows-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsibGluZWFyQ29udHJvbCIsIkFycm93IiwiQXJyb3cuY29uc3RydWN0b3IiLCJzaW1wbGVBcnJvdyIsInNpbXBsZUFycm93LmxlcnAiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsMkRBQTJEO0FBQzNELDZDQUE2QztBQUM3Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQU1sQixJQUFZLEVBQUUsV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3JDLElBQVksTUFBTSxXQUFNLGVBQWUsQ0FBQyxDQUFBO0FBRXhDLElBQVksU0FBUyxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFDOUMsSUFBWSxHQUFHLFdBQU0sWUFBWSxDQUFDLENBQUE7QUFFbEMsSUFBSSxRQUFRLEdBQWdCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFaEUsd0VBQXdFO0FBQ3hFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBSTFFLHlCQUF5QjtBQUN6Qix1QkFDSSxZQUFvQixFQUNwQixXQUF5QixFQUN6QixXQUF5QjtJQUN6QkEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxDQUFDQTtJQUNwQ0EsTUFBTUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsRUFBRUEsRUFBRUEsQ0FBQ0EsT0FBT0EsQ0FDekJBO1FBQ0lBLElBQUlBLE9BQU9BLEdBQUdBLFlBQVlBLENBQUNBO1FBQzNCQSxNQUFNQSxDQUFDQSxVQUFDQSxFQUFV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SUFDM0NBLEVBQUVBLENBQUNBLENBQUNBLEVBQUVBLEtBQUtBLFNBQVNBLENBQUNBO1FBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQ2hDQSxNQUFNQSxDQUFDQSxLQUFLQSxDQUFDQTtBQUNqQkEsQ0FBQ0E7QUFHRCxtREFBbUQ7QUFFbkQsUUFBUSxDQUFDLElBQUksQ0FDVCxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDbkQsV0FBVyxDQUNQLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFDWixDQUFDLENBQ0osQ0FDSixDQUNKLENBQUM7QUFHRixNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUdyRCxRQUFRLENBQUMsUUFBUSxFQUFFO0lBQ2YsRUFBRSxDQUFFLDRCQUE0QixFQUFFLFVBQVMsSUFBSTtRQUMzQyxNQUFNLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsVUFBUyxLQUFLO1lBQ3JELEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLElBQUksRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImRpc3QvdGVzdC9hcnJvd3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIElTIEFVVE8gR0VORVJBVEVEIFRFU1QgQ09ERSwgRE8gTk9UIE1PRElGWSBESVJFQ1RMWVxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL3Nob3VsZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9tb2NoYS5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9ub2RlLmQudHNcIiAvPlxucmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xucmVxdWlyZShcInNob3VsZFwiKTtcblxuXG4vLyAnTTIwMCAxNTAgaDI1MCB2LTUwIGwzNTAgMTAwIGwtMzUwIDEwMCB2LTUwIGgtMjUwIHonXG5cbmltcG9ydCAqIGFzIFJ4IGZyb20gXCJyeFwiO1xuaW1wb3J0ICogYXMgQXggZnJvbSBcIi4uL3NyYy9hbmltYXhlXCI7XG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4uL3NyYy9oZWxwZXJcIjtcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tIFwiLi4vc3JjL2V2ZW50c1wiO1xuaW1wb3J0ICogYXMgUGFyYW1ldGVyIGZyb20gXCIuLi9zcmMvUGFyYW1ldGVyXCI7XG5pbXBvcnQgKiBhcyBzdmcgZnJvbSBcIi4uL3NyYy9zdmdcIjtcblxudmFyIGFuaW1hdG9yOiBBeC5BbmltYXRvciA9IGhlbHBlci5nZXRFeGFtcGxlQW5pbWF0b3IoMTAwLCAxMDApO1xuXG4vL2VhY2ggZnJhbWUsIGZpcnN0IGRyYXcgYmxhY2sgYmFja2dyb3VuZCB0byBlcmFzZSB0aGUgcHJldmlvdXMgY29udGVudHNcbmFuaW1hdG9yLnBsYXkoQXguY3JlYXRlKCkuZmlsbFN0eWxlKFwiIzAwMDAwMFwiKS5maWxsUmVjdChbMCwwXSxbMTAwLDEwMF0pKTtcblxuXG5cbi8vIFRPRE8gbW92ZSB0byBQYXJhbWV0ZXJcbmZ1bmN0aW9uIGxpbmVhckNvbnRyb2woXG4gICAgaW5pdGlhbFZhbHVlOiBudW1iZXIsIFxuICAgIG1heFZlbG9jaXR5OiBBeC5OdW1iZXJBcmcsIFxuICAgIHRhcmdldFZhbHVlOiBBeC5OdW1iZXJBcmcpOiBQYXJhbWV0ZXIuUGFyYW1ldGVyPG51bWJlcj4ge1xuICAgIGNvbnNvbGUubG9nKFwiYnVpbGQ6IGxpbmVhckNvbnRyb2xcIik7XG4gICAgcmV0dXJuIFBhcmFtZXRlci5kdCgpLmNvbWJpbmUoXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIHZhciBjdXJyZW50ID0gaW5pdGlhbFZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIChkdDogbnVtYmVyLCB0YXJnZXQ6IG51bWJlciwgbWF4VmVsOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAgdGFyZ2V0IC0gY3VycmVudDtcbiAgICAgICAgICAgICAgICB2YXIgdmVsb2NpdHk6IG51bWJlciA9IGVycm9yIC8gZHQ7IFxuICAgICAgICAgICAgICAgIGlmICh2ZWxvY2l0eSA+ICBtYXhWZWwpIHZlbG9jaXR5ID0gIG1heFZlbDtcbiAgICAgICAgICAgICAgICBpZiAodmVsb2NpdHkgPCAtbWF4VmVsKSB2ZWxvY2l0eSA9IC1tYXhWZWw7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY3VycmVudCArPSAgdmVsb2NpdHkgKiBkdDtcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudDtcbiAgICAgICAgICAgIH0gICAgXG4gICAgICAgIH0sXG4gICAgICAgIFBhcmFtZXRlci5mcm9tKG1heFZlbG9jaXR5KSxcbiAgICAgICAgUGFyYW1ldGVyLmZyb20odGFyZ2V0VmFsdWUpXG4gICAgKVxufVxuXG50eXBlIEFycm93U2lnbmFsID0gXCJPUEVOXCIgfCBcIkNMT1NFXCIgfCBcIkVYSVRcIjtcblxuY2xhc3MgQXJyb3cgZXh0ZW5kcyBBeC5PcGVyYXRpb24ge1xuICAgIGNvbW1hbmRzOiBSeC5PYnNlcnZlcjxBcnJvd1NpZ25hbD47IC8vIHNpZ25hbHMgaW50byBhIHN0YXRlIG1hY2hpbmVcbi8vICAgIHN0YXRlOiBSeC5PYnNlcnZhYmxlPEFycm93U3RhdGU+OyAvLyBkaXNjcmV0ZSBzdGF0ZSBvZiBhbmltYXRpb25cbn1cbi8vIFNpbXBsZSBhcnJvdyB0aGF0IHBvaW50cyB0byAoMCwwKVxuLy8gLS0+XG5mdW5jdGlvbiBzaW1wbGVBcnJvdyhcbiAgICBzdGVtV2lkdGg6IEF4Lk51bWJlckFyZywgc3RlbUxlbmd0aDogQXguTnVtYmVyQXJnLCBcbiAgICBhcnJvd1dpZHRoOiBBeC5OdW1iZXJBcmcsIGFycm93TGVuZ3RoOiBBeC5OdW1iZXJBcmcsIFxuICAgIHNwZWVkOiBBeC5OdW1iZXJBcmcsIFxuICAgIGNiPzogKHZhbHVlOiBBcnJvdykgPT4gdm9pZCk6IEFycm93IHtcbiAgICBcbiAgICBcbiAgICBcbiAgICAvLyBzb21lIHBvaW50IHdlIHdpbGwgaGF2ZSBhIHRpY2sgLT4gY29tbWFuZCBwYXJhbWV0ZXJcbiAgICB2YXIgY29tbWFuZDogUGFyYW1ldGVyLlBhcmFtZXRlcjxBcnJvd1NpZ25hbD4gPSBQYXJhbWV0ZXIuY29uc3RhbnQoPEFycm93U2lnbmFsPlwiT1BFTlwiKTtcbiAgICBcbiAgICAvLyB0aGlzIGdldHMgbWVyZ2VkIHdpdGggZXZlcnl0aGluZyBpbiBvcmRlciB0byB1cGRhdGUgdGhlIHZhcmlvdXNcbiAgICAvLyBsaW5lYXJDb250cm9sIHNpZ25hbHNcbiAgICAvLyBvbmUgY2hhbmdlIGluIHN0YXRlIHNob3VsZCBjaGFuZ2UgdGhlIHRhcmdldCBmb3Igc2V2ZXJhbCBsaW5lYXJDb250cm9sJ3NcbiAgICAvLyB0aG9zZSBjb250cm9scyBhcmUgdGhlbiBwaXBlZCBpbnRvIHRoZSBTVkcgY29tbWFuZC5cbiAgICAvLyBLSUxMIC0xXG4gICAgLy8gQ0xPU0UgIDBcbiAgICAvLyAuXG4gICAgLy8gIC5cbiAgICAvLyAgIC5cbiAgICAvLyAgIC1cbiAgICAvLyAgLS1cbiAgICAvLyAtLS1cbiAgICAvLyAtLT5cbiAgICAvLyBPUEVOICAgIDFcbiAgICBcbiAgICAvLyBUaGUgaW50ZXJtZWRpYXRlIHJlcHJlc2VudGF0aW9uIGlzIGEgbnVtYmVyIGZyb20gMCAtIDFcbiAgICAvLyBJdHMgY3VycmVudCBzdGF0ZSBpcyBtb3ZlZCBpbiB0aGUgZGlyZWN0aW9uIG9mIE9QRU4gb3IgQ0xPU0VcbiAgICAvLyBhdCBhIGxpbmVhciBzcGVlZFxuICAgIHZhciBjb21tYW5kVG9JUiA9IFBhcmFtZXRlci5zaW4oXG4gICAgICAgIFBhcmFtZXRlci50KCkuY29tYmluZShcbiAgICAgICAgICAgICgpID0+ICh0OiBudW1iZXIsIHNwZWVkOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdCAqIE1hdGguUEkgKiAyICogc3BlZWRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBQYXJhbWV0ZXIuZnJvbShzcGVlZClcbiAgICAgICAgKVxuICAgICkubWFwVmFsdWUoc2luID0+IHNpbiAvIDIgKyAwLjUpO1xuICAgIC8vICAgICB0b3BPdXRlci0tK1xuICAgIC8vICAgICAgICAgICAgICAgfFxcXG4gICAgLy8gIC90b3BMZWZ0ICAgICB8IFxcXG4gICAgLy8gKy0tLS0tLS0tLS0tLS0tICBcXFxuICAgIC8vIHwgICAgICAgICAgICAgICAgICstLXRpcFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tKyAgL1xuICAgIC8vICAgICAgICAgICAgICAvfCAvXG4gICAgLy8gICAgIGJvdElubmVyLyB8L1xuICAgIFxuICAgIFxuICAgIFxuICAgIFxuICAgIHZhciBzdGVtTGVuZ3RoUCA9IFBhcmFtZXRlci5mcm9tKHN0ZW1MZW5ndGgpO1xuICAgIHZhciBzdGVtV2lkdGhQID0gUGFyYW1ldGVyLmZyb20oc3RlbVdpZHRoKTtcbiAgICB2YXIgYXJyb3dXaWR0aFAgPSBQYXJhbWV0ZXIuZnJvbShhcnJvd1dpZHRoKTtcbiAgICB2YXIgYXJyb3dMZW5ndGhQID0gUGFyYW1ldGVyLmZyb20oYXJyb3dMZW5ndGgpO1xuICAgIFxuICAgIC8qKlxuICAgICAqIExpbmVhciBpbnRlcnBvbGF0aW9uXG4gICAgICovXG4gICAgZnVuY3Rpb24gbGVycCh0OiBudW1iZXIsIHN0YXJ0OiBudW1iZXIsIGVuZDogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0ICsgdCAqIChlbmQgLSBzdGFydCk7XG4gICAgfVxuICAgIFxuICAgIFxuICAgIHZhciBtb3ZlVG9Ub3BMZWZ0RHggPSBjb21tYW5kVG9JUi5jb21iaW5lKFxuICAgICAgICAoKSA9PiAodDogbnVtYmVyLCBzdGVtTGVuZ3RoOiBudW1iZXIsIGFycm93TGVuZ3RoOiBudW1iZXIsIHN0ZW1XaWR0aDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gLSBzdGVtTGVuZ3RoIC0gYXJyb3dMZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZW1MZW5ndGhQLFxuICAgICAgICBhcnJvd0xlbmd0aFAsXG4gICAgICAgIHN0ZW1XaWR0aFBcbiAgICApXG4gICAgXG4gICAgdmFyIG1vdmVUb1RvcExlZnREeSA9IGNvbW1hbmRUb0lSLmNvbWJpbmUoXG4gICAgICAgICgpID0+ICh0OiBudW1iZXIsIHN0ZW1MZW5ndGg6IG51bWJlciwgYXJyb3dMZW5ndGg6IG51bWJlciwgc3RlbVdpZHRoOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAtc3RlbVdpZHRoIC8gMlxuICAgICAgICB9LFxuICAgICAgICBzdGVtTGVuZ3RoUCxcbiAgICAgICAgYXJyb3dMZW5ndGhQLFxuICAgICAgICBzdGVtV2lkdGhQXG4gICAgKVxuICAgICAgXG4gICAgXG4gICAgdmFyIGxpdmVTdGVtTGVuZ3RoID0gY29tbWFuZFRvSVIuY29tYmluZShcbiAgICAgICAgKCkgPT4gKHQ6IG51bWJlciwgc3RlbUxlbmd0aDogbnVtYmVyLCBhcnJvd0xlbmd0aDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gbGVycCh0LCBzdGVtTGVuZ3RoLzIsIHN0ZW1MZW5ndGgpIFxuICAgICAgICB9LFxuICAgICAgICBzdGVtTGVuZ3RoUCxcbiAgICAgICAgYXJyb3dMZW5ndGhQXG4gICAgKSAgICAgIFxuICAgICAgICAgICAgXG4gICAgXG4gICAgdmFyIGxpdmVPdmVyaGFuZyA9IGNvbW1hbmRUb0lSLmNvbWJpbmUoXG4gICAgICAgICgpID0+ICh0OiBudW1iZXIsIHN0ZW1XaWR0aDogbnVtYmVyLCBhcnJvd1dpZHRoOiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhcnJvd1dpZHRoIC0gc3RlbVdpZHRoXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZW1XaWR0aFAsXG4gICAgICAgIGFycm93V2lkdGhQXG4gICAgKVxuICAgIFxuICAgIHZhciBsaXZlVGlwRHggPSBjb21tYW5kVG9JUi5jb21iaW5lKFxuICAgICAgICAoKSA9PiAodDogbnVtYmVyLCBzdGVtV2lkdGg6IG51bWJlciwgYXJyb3dMZW5ndGg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFycm93TGVuZ3RoXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZW1XaWR0aFAsXG4gICAgICAgIGFycm93TGVuZ3RoUFxuICAgIClcbiAgICBcbiAgICB2YXIgbGl2ZVRpcER5ID0gY29tbWFuZFRvSVIuY29tYmluZShcbiAgICAgICAgKCkgPT4gKHQ6IG51bWJlciwgc3RlbVdpZHRoOiBudW1iZXIsIGFycm93V2lkdGg6IG51bWJlcikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGFycm93V2lkdGggLyAyXG4gICAgICAgIH0sXG4gICAgICAgIHN0ZW1XaWR0aFAsXG4gICAgICAgIGFycm93V2lkdGhQXG4gICAgKVxuICAgIFxuICAgIHZhciBwYXRoID0gc3ZnLnN2Z3BhdGgoQXguY3JlYXRlKCkuYmVnaW5QYXRoKCksXG4gICAgICAgICdNJTEgJTIgaCUzIHYtJTQgbCU1ICU2IGwtJTUgJTYgdi0lNCBoLSUzIHonLFxuICAgICAgICBtb3ZlVG9Ub3BMZWZ0RHgsXG4gICAgICAgIG1vdmVUb1RvcExlZnREeSxcbiAgICAgICAgbGl2ZVN0ZW1MZW5ndGgsXG4gICAgICAgIGxpdmVPdmVyaGFuZyxcbiAgICAgICAgbGl2ZVRpcER4LFxuICAgICAgICBsaXZlVGlwRHlcbiAgICApLmZpbGwoKTtcbiAgICAvLyBUaGUgemVybyB0byAxIElSIGFmZmV0cyBlYWNoIGxpbmUgb24gYW4gU1ZHIGFuaW1hdGlvblxuICAgIHZhciBhcnJvdyA9IG5ldyBBcnJvdyhwYXRoLmF0dGFjaCk7IC8vIHRvZG9cbiAgICBpZiAoY2IgIT09IHVuZGVmaW5lZCkgY2IoYXJyb3cpO1xuICAgIHJldHVybiBhcnJvdztcbn1cblxuXG4vLyBVc2luZyBodHRwOi8vYW50aG9ueWR1Z29pcy5jb20vc3ZnLXBhdGgtYnVpbGRlci9cblxuYW5pbWF0b3IucGxheShcbiAgICBBeC5jcmVhdGUoKS50cmFuc2xhdGUoWzUwLCA1MF0pLmZpbGxTdHlsZShcIndoaXRlXCIpLnBpcGUoXG4gICAgICAgIHNpbXBsZUFycm93KFxuICAgICAgICAgICAgMywgMjUsIDUsIDI1LFxuICAgICAgICAgICAgMiAgICBcbiAgICAgICAgKVxuICAgIClcbik7XG5cbiBcbmhlbHBlci5wbGF5RXhhbXBsZShcImFycm93c1wiLCAxMCwgYW5pbWF0b3IsIDEwMCwgMTAwKTtcblxuXG5kZXNjcmliZSgnYXJyb3dzJywgZnVuY3Rpb24gKCkge1xuICAgIGl0ICgnc2hvdWxkIG1hdGNoIHRoZSByZWZlcmVuY2UnLCBmdW5jdGlvbihkb25lKSB7XG4gICAgICAgIGhlbHBlci5zYW1lRXhhbXBsZShcImFycm93c1wiLCBcImFycm93cy1yZWZcIiwgZnVuY3Rpb24oZXF1YWwpIHtcbiAgICAgICAgICAgIGVxdWFsLnNob3VsZC5lcXVhbCh0cnVlKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSlcbiAgICB9KTtcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
