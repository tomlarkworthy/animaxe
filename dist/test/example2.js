// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/Parameter");
var animator = helper.getExampleAnimator();
//a line between two points of a specified thickness and color (which are temporally varying parameters)
function thickLine1tick(thickness, start, end, css_color) {
    return Ax.create()
        .take(1)
        .strokeStyle(css_color)
        .withinPath(Ax.create()
        .lineWidth(thickness)
        .moveTo(start)
        .lineTo(end))
        .stroke();
}
/**
 * Three frame animation of a thinning line. Animations are displaced in time so even if the start and end streams move
 * The line doesn't
 */
function sparkLine(start, end, css_color) {
    return thickLine1tick(6, //thick line
    start, end, css_color)
        .then(thickLine1tick(2, //medium line
    Parameter.displaceT(-0.1, start), Parameter.displaceT(-0.1, end), css_color))
        .then(thickLine1tick(1, //thin line
    Parameter.displaceT(-0.2, start), Parameter.displaceT(-0.2, end), css_color));
}
//large circle funcitons
var bigSin = Parameter.sin(1).map(function (x) { return x * 40 + 50; });
var bigCos = Parameter.cos(1).map(function (x) { return x * 40 + 50; });
//periodic color
var red = 255;
var green = Parameter.sin(2).map(function (x) { return x * 100 + 55; });
var blue = 50;
//each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
animator.play(Ax.create().emit(sparkLine(Parameter.point(bigSin, bigCos), Parameter.displaceT(-0.1, Parameter.point(bigSin, bigCos)), Parameter.rgba(red, green, blue, 1))));
helper.playExample("example2", 20, animator, 100, 100);
describe('example2', function () {
    it('should match the reference', function (done) {
        helper.sameExample("example2", "example2-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsidGhpY2tMaW5lMXRpY2siLCJzcGFya0xpbmUiXSwibWFwcGluZ3MiOiJBQUFBLDJEQUEyRDtBQUMzRCw2Q0FBNkM7QUFDN0MsNENBQTRDO0FBQzVDLDJDQUEyQztBQUMzQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN4QyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFHbEIsSUFBWSxFQUFFLFdBQU0sZ0JBQWdCLENBQUMsQ0FBQTtBQUNyQyxJQUFZLE1BQU0sV0FBTSxlQUFlLENBQUMsQ0FBQTtBQUV4QyxJQUFZLFNBQVMsV0FBTSxrQkFBa0IsQ0FBQyxDQUFBO0FBRTlDLElBQUksUUFBUSxHQUFnQixNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztBQUV4RCx3R0FBd0c7QUFDeEcsd0JBQ0ksU0FBaUIsRUFDakIsS0FBa0IsRUFDbEIsR0FBZ0IsRUFDaEIsU0FBK0I7SUFFL0JBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBO1NBQ2JBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1NBQ1BBLFdBQVdBLENBQUNBLFNBQVNBLENBQUNBO1NBQ3RCQSxVQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQTtTQUNsQkEsU0FBU0EsQ0FBQ0EsU0FBU0EsQ0FBQ0E7U0FDcEJBLE1BQU1BLENBQUNBLEtBQUtBLENBQUNBO1NBQ2JBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQ2ZBO1NBQ0FBLE1BQU1BLEVBQUVBLENBQUNBO0FBQ2xCQSxDQUFDQTtBQUVEOzs7R0FHRztBQUNILG1CQUFtQixLQUFrQixFQUFFLEdBQWdCLEVBQUUsU0FBc0I7SUFDM0VDLE1BQU1BLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLEVBQUVBLFlBQVlBO0lBQzdCQSxLQUFLQSxFQUNMQSxHQUFHQSxFQUFFQSxTQUFTQSxDQUFDQTtTQUNsQkEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsYUFBYUE7SUFDakNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEtBQUtBLENBQUNBLEVBQ2hDQSxTQUFTQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxFQUM5QkEsU0FBU0EsQ0FBQ0EsQ0FBQ0E7U0FDZEEsSUFBSUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsV0FBV0E7SUFDL0JBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLEtBQUtBLENBQUNBLEVBQ2hDQSxTQUFTQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxHQUFHQSxDQUFDQSxFQUM5QkEsU0FBU0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDeEJBLENBQUNBO0FBRUQsd0JBQXdCO0FBQ3hCLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUM7QUFDcEQsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBWCxDQUFXLENBQUMsQ0FBQztBQUVwRCxnQkFBZ0I7QUFDaEIsSUFBSSxHQUFHLEdBQUssR0FBRyxDQUFDO0FBQ2hCLElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQVosQ0FBWSxDQUFDLENBQUM7QUFDcEQsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBRWQsd0VBQXdFO0FBQ3hFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTFFLFFBQVEsQ0FBQyxJQUFJLENBQ1QsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FDWixTQUFTLENBQ0wsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLEVBQzlCLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUMsTUFBTSxDQUFDLENBQUMsRUFDekQsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLElBQUksRUFBQyxDQUFDLENBQUMsQ0FDbkMsQ0FDSixDQUNKLENBQUM7QUFFRixNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN2RCxRQUFRLENBQUMsVUFBVSxFQUFFO0lBQ2pCLEVBQUUsQ0FBRSw0QkFBNEIsRUFBRSxVQUFTLElBQUk7UUFDM0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLFVBQVMsS0FBSztZQUN6RCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJkaXN0L3Rlc3QvZXhhbXBsZTIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIElTIEFVVE8gR0VORVJBVEVEIFRFU1QgQ09ERSwgRE8gTk9UIE1PRElGWSBESVJFQ1RMWVxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL3Nob3VsZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9tb2NoYS5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9ub2RlLmQudHNcIiAvPlxucmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xucmVxdWlyZShcInNob3VsZFwiKTtcblxuaW1wb3J0ICogYXMgUnggZnJvbSBcInJ4XCI7XG5pbXBvcnQgKiBhcyBBeCBmcm9tIFwiLi4vc3JjL2FuaW1heGVcIjtcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi4vc3JjL2hlbHBlclwiO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gXCIuLi9zcmMvZXZlbnRzXCI7XG5pbXBvcnQgKiBhcyBQYXJhbWV0ZXIgZnJvbSBcIi4uL3NyYy9QYXJhbWV0ZXJcIjtcblxudmFyIGFuaW1hdG9yOiBBeC5BbmltYXRvciA9IGhlbHBlci5nZXRFeGFtcGxlQW5pbWF0b3IoKTtcblxuLy9hIGxpbmUgYmV0d2VlbiB0d28gcG9pbnRzIG9mIGEgc3BlY2lmaWVkIHRoaWNrbmVzcyBhbmQgY29sb3IgKHdoaWNoIGFyZSB0ZW1wb3JhbGx5IHZhcnlpbmcgcGFyYW1ldGVycylcbmZ1bmN0aW9uIHRoaWNrTGluZTF0aWNrKFxuICAgIHRoaWNrbmVzczogbnVtYmVyLFxuICAgIHN0YXJ0OiBBeC5Qb2ludEFyZyxcbiAgICBlbmQ6IEF4LlBvaW50QXJnLFxuICAgIGNzc19jb2xvcjogc3RyaW5nIHwgQXguQ29sb3JBcmcpXG46IEF4LkFuaW1hdGlvbiB7XG4gICAgcmV0dXJuIEF4LmNyZWF0ZSgpXG4gICAgICAgIC50YWtlKDEpXG4gICAgICAgIC5zdHJva2VTdHlsZShjc3NfY29sb3IpXG4gICAgICAgIC53aXRoaW5QYXRoKEF4LmNyZWF0ZSgpXG4gICAgICAgICAgICAubGluZVdpZHRoKHRoaWNrbmVzcylcbiAgICAgICAgICAgIC5tb3ZlVG8oc3RhcnQpXG4gICAgICAgICAgICAubGluZVRvKGVuZClcbiAgICAgICAgKVxuICAgICAgICAuc3Ryb2tlKCk7XG59XG5cbi8qKlxuICogVGhyZWUgZnJhbWUgYW5pbWF0aW9uIG9mIGEgdGhpbm5pbmcgbGluZS4gQW5pbWF0aW9ucyBhcmUgZGlzcGxhY2VkIGluIHRpbWUgc28gZXZlbiBpZiB0aGUgc3RhcnQgYW5kIGVuZCBzdHJlYW1zIG1vdmVcbiAqIFRoZSBsaW5lIGRvZXNuJ3RcbiAqL1xuZnVuY3Rpb24gc3BhcmtMaW5lKHN0YXJ0OiBBeC5Qb2ludEFyZywgZW5kOiBBeC5Qb2ludEFyZywgY3NzX2NvbG9yOiBBeC5Db2xvckFyZyk6IEF4LkFuaW1hdGlvbiB7IC8vd2UgY291bGQgYmUgY2xldmVyIGFuZCBsZXQgc3BhcmsgdGFrZSBhIHNlcSwgYnV0IHVzZXIgZnVuY3Rpb25zIHNob3VsZCBiZSBzaW1wbGVcbiAgICByZXR1cm4gdGhpY2tMaW5lMXRpY2soNiwgLy90aGljayBsaW5lXG4gICAgICAgICAgICBzdGFydCxcbiAgICAgICAgICAgIGVuZCwgY3NzX2NvbG9yKVxuICAgICAgICAudGhlbih0aGlja0xpbmUxdGljaygyLCAvL21lZGl1bSBsaW5lXG4gICAgICAgICAgICBQYXJhbWV0ZXIuZGlzcGxhY2VUKC0wLjEsIHN0YXJ0KSxcbiAgICAgICAgICAgIFBhcmFtZXRlci5kaXNwbGFjZVQoLTAuMSwgZW5kKSxcbiAgICAgICAgICAgIGNzc19jb2xvcikpXG4gICAgICAgIC50aGVuKHRoaWNrTGluZTF0aWNrKDEsIC8vdGhpbiBsaW5lXG4gICAgICAgICAgICBQYXJhbWV0ZXIuZGlzcGxhY2VUKC0wLjIsIHN0YXJ0KSxcbiAgICAgICAgICAgIFBhcmFtZXRlci5kaXNwbGFjZVQoLTAuMiwgZW5kKSxcbiAgICAgICAgICAgIGNzc19jb2xvcikpO1xufVxuXG4vL2xhcmdlIGNpcmNsZSBmdW5jaXRvbnNcbnZhciBiaWdTaW4gPSBQYXJhbWV0ZXIuc2luKDEpLm1hcCh4ID0+IHggKiA0MCArIDUwKTtcbnZhciBiaWdDb3MgPSBQYXJhbWV0ZXIuY29zKDEpLm1hcCh4ID0+IHggKiA0MCArIDUwKTtcblxuLy9wZXJpb2RpYyBjb2xvclxudmFyIHJlZCAgID0gMjU1O1xudmFyIGdyZWVuID0gUGFyYW1ldGVyLnNpbigyKS5tYXAoeCA9PiB4ICogMTAwICsgNTUpO1xudmFyIGJsdWUgPSA1MDtcblxuLy9lYWNoIGZyYW1lLCBmaXJzdCBkcmF3IGJsYWNrIGJhY2tncm91bmQgdG8gZXJhc2UgdGhlIHByZXZpb3VzIGNvbnRlbnRzXG5hbmltYXRvci5wbGF5KEF4LmNyZWF0ZSgpLmZpbGxTdHlsZShcIiMwMDAwMDBcIikuZmlsbFJlY3QoWzAsMF0sWzEwMCwxMDBdKSk7XG5cbmFuaW1hdG9yLnBsYXkoXG4gICAgQXguY3JlYXRlKCkuZW1pdChcbiAgICAgICAgc3BhcmtMaW5lKFxuICAgICAgICAgICAgUGFyYW1ldGVyLnBvaW50KGJpZ1NpbixiaWdDb3MpLFxuICAgICAgICAgICAgUGFyYW1ldGVyLmRpc3BsYWNlVCgtMC4xLCBQYXJhbWV0ZXIucG9pbnQoYmlnU2luLGJpZ0NvcykpLFxuICAgICAgICAgICAgUGFyYW1ldGVyLnJnYmEocmVkLGdyZWVuLGJsdWUsMSlcbiAgICAgICAgKVxuICAgIClcbik7XG5cbmhlbHBlci5wbGF5RXhhbXBsZShcImV4YW1wbGUyXCIsIDIwLCBhbmltYXRvciwgMTAwLCAxMDApO1xuZGVzY3JpYmUoJ2V4YW1wbGUyJywgZnVuY3Rpb24gKCkge1xuICAgIGl0ICgnc2hvdWxkIG1hdGNoIHRoZSByZWZlcmVuY2UnLCBmdW5jdGlvbihkb25lKSB7XG4gICAgICAgIGhlbHBlci5zYW1lRXhhbXBsZShcImV4YW1wbGUyXCIsIFwiZXhhbXBsZTItcmVmXCIsIGZ1bmN0aW9uKGVxdWFsKSB7XG4gICAgICAgICAgICBlcXVhbC5zaG91bGQuZXF1YWwodHJ1ZSk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pXG4gICAgfSk7XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
