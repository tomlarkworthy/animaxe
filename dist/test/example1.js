// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require("should");
require('source-map-support').install();
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/parameter");
var animator = helper.getExampleAnimator();
//2 frame animated glow
function spark(color) {
    return Ax.create()
        .take(1)
        .fillStyle(color)
        .fillRect([-2, -2], [5, 5])
        .then(Ax.create()
        .take(1)
        .fillStyle(color)
        .fillRect([-1, -1], [3, 3]));
}
//large circle funcitons
var bigSin = Parameter.sin(1).map(function (x) { return x * 40 + 50; });
var bigCos = Parameter.cos(1).map(function (x) { return x * 40 + 50; });
var red = Parameter.sin(2).map(function (x) { return x * 125 + 125; });
var green = Parameter.sin(2).map(function (x) { return x * 55 + 200; });
//each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
// move the drawing context frame of reference to the center (50,50) and then move it by a +ve x velocity,
// so the frame of reference moves over time.
// then draw our 2 frame spark animation in a loop so it draws forever
animator.play(Ax.create()
    .translate([50, 50])
    .velocity([50, 0])
    .loop(spark("#FFFFFF")));
// move the draw context to a coordinate determined by trig (i.e. in a circle)
animator.play(Ax.create()
    .loop(Ax.create()
    .translate(Parameter.point(bigSin, bigCos))
    .pipe(spark(Parameter.rgba(red, green, 0, 1)))));
// tween between the center (50,50) and a point on a circle. This has the effect of moving the inner spark animation
// in a archimedes spiral.
animator.play(Ax.create()
    .tween_linear([50, 50], Parameter.point(bigSin, bigCos), 1)
    .loop(spark("red")));
// the helper function pipes injects the context, either from a web canvas or a fake node.js one.
helper.playExample("example1", 20, animator, 100, 100);
describe('example1', function () {
    it('should match the reference', function (done) {
        helper.sameExample("example1", "example1-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsic3BhcmsiXSwibWFwcGluZ3MiOiJBQUFBLDJEQUEyRDtBQUMzRCw2Q0FBNkM7QUFDN0MsNENBQTRDO0FBQzVDLDJDQUEyQztBQUMzQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDbEIsT0FBTyxDQUFDLG9CQUFvQixDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFHeEMsSUFBWSxFQUFFLFdBQU0sZ0JBQWdCLENBQUMsQ0FBQTtBQUNyQyxJQUFZLE1BQU0sV0FBTSxlQUFlLENBQUMsQ0FBQTtBQUV4QyxJQUFZLFNBQVMsV0FBTSxrQkFBa0IsQ0FBQyxDQUFBO0FBRTlDLElBQUksUUFBUSxHQUFnQixNQUFNLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztBQUd4RCx1QkFBdUI7QUFDdkIsZUFBZSxLQUFrQjtJQUM3QkEsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsTUFBTUEsRUFBRUE7U0FDYkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7U0FDUEEsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0E7U0FDaEJBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLEVBQUNBLENBQUNBLENBQUNBLENBQUNBO1NBQ3pCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQTtTQUNaQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtTQUNQQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQTtTQUNoQkEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FDN0JBLENBQUNBO0FBQ1ZBLENBQUNBO0FBQ0Qsd0JBQXdCO0FBQ3hCLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQVgsQ0FBVyxDQUFDLENBQUM7QUFDcEQsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBWCxDQUFXLENBQUMsQ0FBQztBQUVwRCxJQUFJLEdBQUcsR0FBSyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxFQUFiLENBQWEsQ0FBQyxDQUFDO0FBQ3JELElBQUksS0FBSyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLEVBQVosQ0FBWSxDQUFDLENBQUM7QUFFcEQsd0VBQXdFO0FBQ3hFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRzFFLDBHQUEwRztBQUMxRyw2Q0FBNkM7QUFDN0Msc0VBQXNFO0FBQ3RFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRTtLQUNwQixTQUFTLENBQUMsQ0FBQyxFQUFFLEVBQUMsRUFBRSxDQUFDLENBQUM7S0FDbEIsUUFBUSxDQUFDLENBQUMsRUFBRSxFQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2hCLElBQUksQ0FDRCxLQUFLLENBQUMsU0FBUyxDQUFDLENBQ25CLENBQ0osQ0FBQztBQUVGLDhFQUE4RTtBQUM5RSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7S0FDcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7S0FDWixTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7S0FDMUMsSUFBSSxDQUNELEtBQUssQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQzFDLENBQ0osQ0FDSixDQUFDO0FBRUYsb0hBQW9IO0FBQ3BILDBCQUEwQjtBQUMxQixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7S0FDcEIsWUFBWSxDQUFDLENBQUMsRUFBRSxFQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQztLQUN6RCxJQUFJLENBQ0QsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUNmLENBQ0osQ0FBQztBQUVGLGlHQUFpRztBQUNqRyxNQUFNLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUV2RCxRQUFRLENBQUMsVUFBVSxFQUFFO0lBQ2pCLEVBQUUsQ0FBRSw0QkFBNEIsRUFBRSxVQUFTLElBQUk7UUFDM0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLFVBQVMsS0FBSztZQUN6RCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJkaXN0L3Rlc3QvZXhhbXBsZTEuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIElTIEFVVE8gR0VORVJBVEVEIFRFU1QgQ09ERSwgRE8gTk9UIE1PRElGWSBESVJFQ1RMWVxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL3Nob3VsZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9tb2NoYS5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9ub2RlLmQudHNcIiAvPlxucmVxdWlyZShcInNob3VsZFwiKTtcbnJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcblxuaW1wb3J0ICogYXMgUnggZnJvbSBcInJ4XCI7XG5pbXBvcnQgKiBhcyBBeCBmcm9tIFwiLi4vc3JjL2FuaW1heGVcIjtcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi4vc3JjL2hlbHBlclwiO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gXCIuLi9zcmMvZXZlbnRzXCI7XG5pbXBvcnQgKiBhcyBQYXJhbWV0ZXIgZnJvbSBcIi4uL3NyYy9wYXJhbWV0ZXJcIjtcblxudmFyIGFuaW1hdG9yOiBBeC5BbmltYXRvciA9IGhlbHBlci5nZXRFeGFtcGxlQW5pbWF0b3IoKTtcblxuXG4vLzIgZnJhbWUgYW5pbWF0ZWQgZ2xvd1xuZnVuY3Rpb24gc3BhcmsoY29sb3I6IEF4LkNvbG9yQXJnKTogQXguQW5pbWF0aW9uIHsgLy93ZSBjb3VsZCBiZSBjbGV2ZXIgYW5kIGxldCBzcGFyayB0YWtlIGEgc2VxLCBidXQgdXNlciBmdW5jdGlvbnMgc2hvdWxkIGJlIHNpbXBsZVxuICAgIHJldHVybiBBeC5jcmVhdGUoKVxuICAgICAgICAudGFrZSgxKVxuICAgICAgICAuZmlsbFN0eWxlKGNvbG9yKVxuICAgICAgICAuZmlsbFJlY3QoWy0yLCAtMl0sIFs1LDVdKVxuICAgICAgICAudGhlbihBeC5jcmVhdGUoKVxuICAgICAgICAgICAgLnRha2UoMSlcbiAgICAgICAgICAgIC5maWxsU3R5bGUoY29sb3IpXG4gICAgICAgICAgICAuZmlsbFJlY3QoWy0xLCAtMV0sIFszLDNdKVxuICAgICAgICApO1xufVxuLy9sYXJnZSBjaXJjbGUgZnVuY2l0b25zXG52YXIgYmlnU2luID0gUGFyYW1ldGVyLnNpbigxKS5tYXAoeCA9PiB4ICogNDAgKyA1MCk7XG52YXIgYmlnQ29zID0gUGFyYW1ldGVyLmNvcygxKS5tYXAoeCA9PiB4ICogNDAgKyA1MCk7XG5cbnZhciByZWQgICA9IFBhcmFtZXRlci5zaW4oMikubWFwKHggPT4geCAqIDEyNSArIDEyNSk7XG52YXIgZ3JlZW4gPSBQYXJhbWV0ZXIuc2luKDIpLm1hcCh4ID0+IHggKiA1NSArIDIwMCk7XG5cbi8vZWFjaCBmcmFtZSwgZmlyc3QgZHJhdyBibGFjayBiYWNrZ3JvdW5kIHRvIGVyYXNlIHRoZSBwcmV2aW91cyBjb250ZW50c1xuYW5pbWF0b3IucGxheShBeC5jcmVhdGUoKS5maWxsU3R5bGUoXCIjMDAwMDAwXCIpLmZpbGxSZWN0KFswLDBdLFsxMDAsMTAwXSkpO1xuXG5cbi8vIG1vdmUgdGhlIGRyYXdpbmcgY29udGV4dCBmcmFtZSBvZiByZWZlcmVuY2UgdG8gdGhlIGNlbnRlciAoNTAsNTApIGFuZCB0aGVuIG1vdmUgaXQgYnkgYSArdmUgeCB2ZWxvY2l0eSxcbi8vIHNvIHRoZSBmcmFtZSBvZiByZWZlcmVuY2UgbW92ZXMgb3ZlciB0aW1lLlxuLy8gdGhlbiBkcmF3IG91ciAyIGZyYW1lIHNwYXJrIGFuaW1hdGlvbiBpbiBhIGxvb3Agc28gaXQgZHJhd3MgZm9yZXZlclxuYW5pbWF0b3IucGxheShBeC5jcmVhdGUoKVxuICAgIC50cmFuc2xhdGUoWzUwLDUwXSlcbiAgICAudmVsb2NpdHkoWzUwLDBdKVxuICAgIC5sb29wKFxuICAgICAgICBzcGFyayhcIiNGRkZGRkZcIilcbiAgICApXG4pO1xuXG4vLyBtb3ZlIHRoZSBkcmF3IGNvbnRleHQgdG8gYSBjb29yZGluYXRlIGRldGVybWluZWQgYnkgdHJpZyAoaS5lLiBpbiBhIGNpcmNsZSlcbmFuaW1hdG9yLnBsYXkoQXguY3JlYXRlKClcbiAgICAubG9vcChBeC5jcmVhdGUoKVxuICAgICAgICAudHJhbnNsYXRlKFBhcmFtZXRlci5wb2ludChiaWdTaW4sIGJpZ0NvcykpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgICAgc3BhcmsoUGFyYW1ldGVyLnJnYmEocmVkLCBncmVlbiwgMCwgMSkpXG4gICAgICAgIClcbiAgICApXG4pO1xuXG4vLyB0d2VlbiBiZXR3ZWVuIHRoZSBjZW50ZXIgKDUwLDUwKSBhbmQgYSBwb2ludCBvbiBhIGNpcmNsZS4gVGhpcyBoYXMgdGhlIGVmZmVjdCBvZiBtb3ZpbmcgdGhlIGlubmVyIHNwYXJrIGFuaW1hdGlvblxuLy8gaW4gYSBhcmNoaW1lZGVzIHNwaXJhbC5cbmFuaW1hdG9yLnBsYXkoQXguY3JlYXRlKClcbiAgICAudHdlZW5fbGluZWFyKFs1MCw1MF0sIFBhcmFtZXRlci5wb2ludChiaWdTaW4sIGJpZ0NvcyksIDEpXG4gICAgLmxvb3AoXG4gICAgICAgIHNwYXJrKFwicmVkXCIpXG4gICAgKVxuKTtcblxuLy8gdGhlIGhlbHBlciBmdW5jdGlvbiBwaXBlcyBpbmplY3RzIHRoZSBjb250ZXh0LCBlaXRoZXIgZnJvbSBhIHdlYiBjYW52YXMgb3IgYSBmYWtlIG5vZGUuanMgb25lLlxuaGVscGVyLnBsYXlFeGFtcGxlKFwiZXhhbXBsZTFcIiwgMjAsIGFuaW1hdG9yLCAxMDAsIDEwMCk7XG5cbmRlc2NyaWJlKCdleGFtcGxlMScsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCAoJ3Nob3VsZCBtYXRjaCB0aGUgcmVmZXJlbmNlJywgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICBoZWxwZXIuc2FtZUV4YW1wbGUoXCJleGFtcGxlMVwiLCBcImV4YW1wbGUxLXJlZlwiLCBmdW5jdGlvbihlcXVhbCkge1xuICAgICAgICAgICAgZXF1YWwuc2hvdWxkLmVxdWFsKHRydWUpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KVxuICAgIH0pO1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
