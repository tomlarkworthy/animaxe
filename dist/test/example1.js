// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var animator = helper.getExampleAnimator();
Ax.DEBUG = true;
//2 frame animated glow
function spark(color) {
    return Ax.create()
        .take(1)
        .fillRect([-5, -5], [10, 10])
        .then(Ax.create().take(1).fillRect([-2, -2], [5, 5]));
}
// move the drawing context frame of reference to the center (50,50) and then move it by a +ve x velocity,
// so the frame of reference moves over time.
// then draw our 2 frame spark animation in a loop so it draws forever
animator.play(Ax.create()
    .pipe(spark("#FF00FF")));
// move the draw context to a coordinate determined by trig (i.e. in a circle)
/*
animator.play(Ax.create()
    .loop(Ax.create()
        .translate(Parameter.point(bigSin, bigCos))
        .pipe(
            spark(Parameter.rgba(red, green, 0, 1))
        )
    )
);*/
// tween between the center (50,50) and a point on a circle. This has the effect of moving the inner spark animation
// in a archimedes spiral.
/*
animator.play(Ax.create()
    .tween_linear([50,50], Parameter.point(bigSin, bigCos), 1)
    .loop(
        spark("red")
    )
);*/
// the helper function pipes injects the context, either from a web canvas or a fake node.js one.
helper.playExample("example1", 20, animator, 100, 100);
describe('example1', function () {
    it('should match the reference', function (done) {
        helper.sameExample("example1", "example1-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsic3BhcmsiXSwibWFwcGluZ3MiOiJBQUFBLDJEQUEyRDtBQUMzRCw2Q0FBNkM7QUFDN0MsNENBQTRDO0FBQzVDLDJDQUEyQztBQUMzQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN4QyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFHbEIsSUFBWSxFQUFFLFdBQU0sZ0JBQWdCLENBQUMsQ0FBQTtBQUNyQyxJQUFZLE1BQU0sV0FBTSxlQUFlLENBQUMsQ0FBQTtBQUl4QyxJQUFJLFFBQVEsR0FBZ0IsTUFBTSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFFeEQsRUFBRSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7QUFDaEIsdUJBQXVCO0FBQ3ZCLGVBQWUsS0FBa0I7SUFDN0JBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBO1NBQ2JBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO1NBQ1BBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUNBLEVBQUVBLENBQUNBLENBQUNBO1NBQzNCQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFBQTtBQUM3REEsQ0FBQ0E7QUFFRCwwR0FBMEc7QUFDMUcsNkNBQTZDO0FBQzdDLHNFQUFzRTtBQUN0RSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7S0FDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUMxQixDQUFDO0FBQ0YsOEVBQThFO0FBQzlFOzs7Ozs7OztJQVFJO0FBRUosb0hBQW9IO0FBQ3BILDBCQUEwQjtBQUMxQjs7Ozs7O0lBTUk7QUFFSixpR0FBaUc7QUFDakcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFdkQsUUFBUSxDQUFDLFVBQVUsRUFBRTtJQUNqQixFQUFFLENBQUUsNEJBQTRCLEVBQUUsVUFBUyxJQUFJO1FBQzNDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxVQUFTLEtBQUs7WUFDekQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiZGlzdC90ZXN0L2V4YW1wbGUxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBJUyBBVVRPIEdFTkVSQVRFRCBURVNUIENPREUsIERPIE5PVCBNT0RJRlkgRElSRUNUTFlcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9zaG91bGQuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbW9jaGEuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbm9kZS5kLnRzXCIgLz5cbnJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcbnJlcXVpcmUoXCJzaG91bGRcIik7XG5cbmltcG9ydCAqIGFzIFJ4IGZyb20gXCJyeFwiO1xuaW1wb3J0ICogYXMgQXggZnJvbSBcIi4uL3NyYy9hbmltYXhlXCI7XG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4uL3NyYy9oZWxwZXJcIjtcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tIFwiLi4vc3JjL2V2ZW50c1wiO1xuaW1wb3J0ICogYXMgUGFyYW1ldGVyIGZyb20gXCIuLi9zcmMvUGFyYW1ldGVyXCI7XG5cbnZhciBhbmltYXRvcjogQXguQW5pbWF0b3IgPSBoZWxwZXIuZ2V0RXhhbXBsZUFuaW1hdG9yKCk7XG5cbkF4LkRFQlVHID0gdHJ1ZTtcbi8vMiBmcmFtZSBhbmltYXRlZCBnbG93XG5mdW5jdGlvbiBzcGFyayhjb2xvcjogQXguQ29sb3JBcmcpOiBBeC5BbmltYXRpb24geyAvL3dlIGNvdWxkIGJlIGNsZXZlciBhbmQgbGV0IHNwYXJrIHRha2UgYSBzZXEsIGJ1dCB1c2VyIGZ1bmN0aW9ucyBzaG91bGQgYmUgc2ltcGxlXG4gICAgcmV0dXJuIEF4LmNyZWF0ZSgpXG4gICAgICAgIC50YWtlKDEpXG4gICAgICAgIC5maWxsUmVjdChbLTUsIC01XSwgWzEwLDEwXSlcbiAgICAgICAgLnRoZW4oQXguY3JlYXRlKCkudGFrZSgxKS5maWxsUmVjdChbLTIsIC0yXSwgWzUsIDVdKSlcbn1cblxuLy8gbW92ZSB0aGUgZHJhd2luZyBjb250ZXh0IGZyYW1lIG9mIHJlZmVyZW5jZSB0byB0aGUgY2VudGVyICg1MCw1MCkgYW5kIHRoZW4gbW92ZSBpdCBieSBhICt2ZSB4IHZlbG9jaXR5LFxuLy8gc28gdGhlIGZyYW1lIG9mIHJlZmVyZW5jZSBtb3ZlcyBvdmVyIHRpbWUuXG4vLyB0aGVuIGRyYXcgb3VyIDIgZnJhbWUgc3BhcmsgYW5pbWF0aW9uIGluIGEgbG9vcCBzbyBpdCBkcmF3cyBmb3JldmVyXG5hbmltYXRvci5wbGF5KEF4LmNyZWF0ZSgpXG4gICAgLnBpcGUoc3BhcmsoXCIjRkYwMEZGXCIpKVxuKTtcbi8vIG1vdmUgdGhlIGRyYXcgY29udGV4dCB0byBhIGNvb3JkaW5hdGUgZGV0ZXJtaW5lZCBieSB0cmlnIChpLmUuIGluIGEgY2lyY2xlKVxuLypcbmFuaW1hdG9yLnBsYXkoQXguY3JlYXRlKClcbiAgICAubG9vcChBeC5jcmVhdGUoKVxuICAgICAgICAudHJhbnNsYXRlKFBhcmFtZXRlci5wb2ludChiaWdTaW4sIGJpZ0NvcykpXG4gICAgICAgIC5waXBlKFxuICAgICAgICAgICAgc3BhcmsoUGFyYW1ldGVyLnJnYmEocmVkLCBncmVlbiwgMCwgMSkpXG4gICAgICAgIClcbiAgICApXG4pOyovXG5cbi8vIHR3ZWVuIGJldHdlZW4gdGhlIGNlbnRlciAoNTAsNTApIGFuZCBhIHBvaW50IG9uIGEgY2lyY2xlLiBUaGlzIGhhcyB0aGUgZWZmZWN0IG9mIG1vdmluZyB0aGUgaW5uZXIgc3BhcmsgYW5pbWF0aW9uXG4vLyBpbiBhIGFyY2hpbWVkZXMgc3BpcmFsLlxuLypcbmFuaW1hdG9yLnBsYXkoQXguY3JlYXRlKClcbiAgICAudHdlZW5fbGluZWFyKFs1MCw1MF0sIFBhcmFtZXRlci5wb2ludChiaWdTaW4sIGJpZ0NvcyksIDEpXG4gICAgLmxvb3AoXG4gICAgICAgIHNwYXJrKFwicmVkXCIpXG4gICAgKVxuKTsqL1xuXG4vLyB0aGUgaGVscGVyIGZ1bmN0aW9uIHBpcGVzIGluamVjdHMgdGhlIGNvbnRleHQsIGVpdGhlciBmcm9tIGEgd2ViIGNhbnZhcyBvciBhIGZha2Ugbm9kZS5qcyBvbmUuXG5oZWxwZXIucGxheUV4YW1wbGUoXCJleGFtcGxlMVwiLCAyMCwgYW5pbWF0b3IsIDEwMCwgMTAwKTtcblxuZGVzY3JpYmUoJ2V4YW1wbGUxJywgZnVuY3Rpb24gKCkge1xuICAgIGl0ICgnc2hvdWxkIG1hdGNoIHRoZSByZWZlcmVuY2UnLCBmdW5jdGlvbihkb25lKSB7XG4gICAgICAgIGhlbHBlci5zYW1lRXhhbXBsZShcImV4YW1wbGUxXCIsIFwiZXhhbXBsZTEtcmVmXCIsIGZ1bmN0aW9uKGVxdWFsKSB7XG4gICAgICAgICAgICBlcXVhbC5zaG91bGQuZXF1YWwodHJ1ZSk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pXG4gICAgfSk7XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
