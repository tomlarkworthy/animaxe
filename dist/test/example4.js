// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/Parameter");
var animator = helper.getExampleAnimator(100, 100);
var red = 255;
var green = 50;
var blue = 50;
function foreverDot(size, css_color) {
    return Ax.create().fillStyle(css_color).fillRect([-size / 2, -size / 2], [size, size]);
}
var bigSin = Parameter.sin(2).map(function (x) { return Math.round(x * 40 + 50); });
var bigCos = Parameter.cos(2).map(function (x) { return Math.round(x * 40 + 50); });
var fastCos = Parameter.cos(1).map(function (x) { return Math.round(x * 38 + 50); });
var fastSin = Parameter.sin(1).map(function (x) { return Math.round(x * 38 + 50); });
//each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
// we draw single pixels of different hues moving on a circle circumference
animator.play(Ax.create().parallel([
    Ax.create().translate(Parameter.point(fastCos, fastSin)).pipe(foreverDot(1, Parameter.hsl(120, 20, 10))),
    Ax.create().translate(Parameter.point(bigCos, bigSin)).pipe(foreverDot(1, Parameter.hsl(240, 20, 30))),
    Ax.create().translate(Parameter.point(bigSin, bigCos)).pipe(foreverDot(1, Parameter.hsl(60, 20, 25)))
]));
// we apply a glow filter last
animator.play(Ax.create().glow(0.01));
helper.playExample("example4", 20, animator, 100, 100);
describe('example4', function () {
    it('should match the reference', function (done) {
        helper.sameExample("example4", "example4-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsiZm9yZXZlckRvdCJdLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEO0FBQzNELDZDQUE2QztBQUM3Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUdsQixJQUFZLEVBQUUsV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3JDLElBQVksTUFBTSxXQUFNLGVBQWUsQ0FBQyxDQUFBO0FBRXhDLElBQVksU0FBUyxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFFOUMsSUFBSSxRQUFRLEdBQWdCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFaEUsSUFBSSxHQUFHLEdBQUssR0FBRyxDQUFDO0FBQ2hCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVkLG9CQUFvQixJQUFZLEVBQUUsU0FBc0I7SUFDcERBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEdBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLEdBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO0FBQ3ZGQSxDQUFDQTtBQUVELElBQUksTUFBTSxHQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7QUFDakUsSUFBSSxNQUFNLEdBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDLEVBQXZCLENBQXVCLENBQUMsQ0FBQztBQUNqRSxJQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUMsRUFBdkIsQ0FBdUIsQ0FBQyxDQUFDO0FBQ2pFLElBQUksT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBQUM7QUFFakUsd0VBQXdFO0FBQ3hFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTFFLDJFQUEyRTtBQUMzRSxRQUFRLENBQUMsSUFBSSxDQUNULEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFDakIsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hHLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7Q0FDMUcsQ0FBQyxDQUNMLENBQUM7QUFFRiw4QkFBOEI7QUFDOUIsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7QUFFdEMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFHdkQsUUFBUSxDQUFDLFVBQVUsRUFBRTtJQUNqQixFQUFFLENBQUUsNEJBQTRCLEVBQUUsVUFBUyxJQUFJO1FBQzNDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxVQUFTLEtBQUs7WUFDekQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiZGlzdC90ZXN0L2V4YW1wbGU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBJUyBBVVRPIEdFTkVSQVRFRCBURVNUIENPREUsIERPIE5PVCBNT0RJRlkgRElSRUNUTFlcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9zaG91bGQuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbW9jaGEuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbm9kZS5kLnRzXCIgLz5cbnJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcbnJlcXVpcmUoXCJzaG91bGRcIik7XG5cbmltcG9ydCAqIGFzIFJ4IGZyb20gXCJyeFwiO1xuaW1wb3J0ICogYXMgQXggZnJvbSBcIi4uL3NyYy9hbmltYXhlXCI7XG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4uL3NyYy9oZWxwZXJcIjtcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tIFwiLi4vc3JjL2V2ZW50c1wiO1xuaW1wb3J0ICogYXMgUGFyYW1ldGVyIGZyb20gXCIuLi9zcmMvUGFyYW1ldGVyXCI7XG5cbnZhciBhbmltYXRvcjogQXguQW5pbWF0b3IgPSBoZWxwZXIuZ2V0RXhhbXBsZUFuaW1hdG9yKDEwMCwgMTAwKTtcblxudmFyIHJlZCAgID0gMjU1O1xudmFyIGdyZWVuID0gNTA7XG52YXIgYmx1ZSA9IDUwO1xuXG5mdW5jdGlvbiBmb3JldmVyRG90KHNpemU6IG51bWJlciwgY3NzX2NvbG9yOiBBeC5Db2xvckFyZyk6IEF4LkFuaW1hdGlvbiB7XG4gICAgcmV0dXJuIEF4LmNyZWF0ZSgpLmZpbGxTdHlsZShjc3NfY29sb3IpLmZpbGxSZWN0KFstc2l6ZS8yLCAtc2l6ZS8yXSwgW3NpemUsIHNpemVdKTtcbn1cblxudmFyIGJpZ1NpbiAgPSBQYXJhbWV0ZXIuc2luKDIpLm1hcCh4ID0+IE1hdGgucm91bmQoeCAqIDQwICsgNTApKTtcbnZhciBiaWdDb3MgID0gUGFyYW1ldGVyLmNvcygyKS5tYXAoeCA9PiBNYXRoLnJvdW5kKHggKiA0MCArIDUwKSk7XG52YXIgZmFzdENvcyA9IFBhcmFtZXRlci5jb3MoMSkubWFwKHggPT4gTWF0aC5yb3VuZCh4ICogMzggKyA1MCkpO1xudmFyIGZhc3RTaW4gPSBQYXJhbWV0ZXIuc2luKDEpLm1hcCh4ID0+IE1hdGgucm91bmQoeCAqIDM4ICsgNTApKTtcblxuLy9lYWNoIGZyYW1lLCBmaXJzdCBkcmF3IGJsYWNrIGJhY2tncm91bmQgdG8gZXJhc2UgdGhlIHByZXZpb3VzIGNvbnRlbnRzXG5hbmltYXRvci5wbGF5KEF4LmNyZWF0ZSgpLmZpbGxTdHlsZShcIiMwMDAwMDBcIikuZmlsbFJlY3QoWzAsMF0sWzEwMCwxMDBdKSk7XG5cbi8vIHdlIGRyYXcgc2luZ2xlIHBpeGVscyBvZiBkaWZmZXJlbnQgaHVlcyBtb3Zpbmcgb24gYSBjaXJjbGUgY2lyY3VtZmVyZW5jZVxuYW5pbWF0b3IucGxheShcbiAgICBBeC5jcmVhdGUoKS5wYXJhbGxlbChbXG4gICAgICAgIEF4LmNyZWF0ZSgpLnRyYW5zbGF0ZShQYXJhbWV0ZXIucG9pbnQoZmFzdENvcywgZmFzdFNpbikpLnBpcGUoZm9yZXZlckRvdCgxLCBQYXJhbWV0ZXIuaHNsKDEyMCwgMjAsIDEwKSkpLFxuICAgICAgICBBeC5jcmVhdGUoKS50cmFuc2xhdGUoUGFyYW1ldGVyLnBvaW50KGJpZ0NvcywgYmlnU2luKSkgIC5waXBlKGZvcmV2ZXJEb3QoMSwgUGFyYW1ldGVyLmhzbCgyNDAsIDIwLCAzMCkpKSxcbiAgICAgICAgQXguY3JlYXRlKCkudHJhbnNsYXRlKFBhcmFtZXRlci5wb2ludChiaWdTaW4sIGJpZ0NvcykpICAucGlwZShmb3JldmVyRG90KDEsIFBhcmFtZXRlci5oc2woNjAsIDIwLCAyNSkpKVxuICAgIF0pXG4pO1xuXG4vLyB3ZSBhcHBseSBhIGdsb3cgZmlsdGVyIGxhc3RcbmFuaW1hdG9yLnBsYXkoQXguY3JlYXRlKCkuZ2xvdygwLjAxKSk7XG5cbmhlbHBlci5wbGF5RXhhbXBsZShcImV4YW1wbGU0XCIsIDIwLCBhbmltYXRvciwgMTAwLCAxMDApO1xuXG5cbmRlc2NyaWJlKCdleGFtcGxlNCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCAoJ3Nob3VsZCBtYXRjaCB0aGUgcmVmZXJlbmNlJywgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICBoZWxwZXIuc2FtZUV4YW1wbGUoXCJleGFtcGxlNFwiLCBcImV4YW1wbGU0LXJlZlwiLCBmdW5jdGlvbihlcXVhbCkge1xuICAgICAgICAgICAgZXF1YWwuc2hvdWxkLmVxdWFsKHRydWUpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KVxuICAgIH0pO1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
