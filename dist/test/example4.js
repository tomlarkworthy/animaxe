// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/Parameter");
var animator = helper.getExampleAnimator(100, 100);
var red = 255;
var green = 50;
var blue = 50;
function foreverDot(size, css_color) {
    return Ax.create().fillStyle(css_color).fillRect([-size / 2, -size / 2], [size, size]);
}
var bigSin = Parameter.sin(Parameter.t().mapValue(function (t) { return t * Math.PI; })).mapValue(function (x) { return Math.round(x * 40 + 50); });
var bigCos = Parameter.cos(Parameter.t().mapValue(function (t) { return t * Math.PI; })).mapValue(function (x) { return Math.round(x * 40 + 50); });
var fastCos = Parameter.cos(Parameter.t().mapValue(function (t) { return 2 * t * Math.PI; })).mapValue(function (x) { return Math.round(x * 38 + 50); });
var fastSin = Parameter.sin(Parameter.t().mapValue(function (t) { return 2 * t * Math.PI; })).mapValue(function (x) { return Math.round(x * 38 + 50); });
//each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
// we draw single pixels of different hues moving on a circle circumference
animator.play(Ax.create().parallel([
    Ax.create().translate(Parameter.point(fastCos, fastSin)).pipe(foreverDot(1, Parameter.hsl(120, 20, 10))),
    Ax.create().translate(Parameter.point(bigCos, bigSin)).pipe(foreverDot(1, Parameter.hsl(240, 20, 30))),
    Ax.create().translate(Parameter.point(bigSin, bigCos)).pipe(foreverDot(1, Parameter.hsl(60, 20, 25)))
]));
// we apply a glow filter last
animator.play(Ax.create().glow(0.01));
helper.playExample("example4", 20, animator, 100, 100);
describe('example4', function () {
    it('should match the reference', function (done) {
        helper.sameExample("example4", "example4-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsiZm9yZXZlckRvdCJdLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEO0FBQzNELDZDQUE2QztBQUM3Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUdsQixJQUFZLEVBQUUsV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3JDLElBQVksTUFBTSxXQUFNLGVBQWUsQ0FBQyxDQUFBO0FBRXhDLElBQVksU0FBUyxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFFOUMsSUFBSSxRQUFRLEdBQWdCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFaEUsSUFBSSxHQUFHLEdBQUssR0FBRyxDQUFDO0FBQ2hCLElBQUksS0FBSyxHQUFHLEVBQUUsQ0FBQztBQUNmLElBQUksSUFBSSxHQUFHLEVBQUUsQ0FBQztBQUVkLG9CQUFvQixJQUFZLEVBQUUsU0FBc0I7SUFDcERBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEdBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLEdBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO0FBQ3ZGQSxDQUFDQTtBQUVELElBQUksTUFBTSxHQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxFQUFYLENBQVcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLFVBQUEsQ0FBQyxJQUFJ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QUcsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUd2RCxRQUFRLENBQUMsVUFBVSxFQUFFO0lBQ2pCLEVBQUUsQ0FBRSw0QkFBNEIsRUFBRSxVQUFTLElBQUk7UUFDM0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUFFLFVBQVMsS0FBSztZQUN6RCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFJLEVBQUUsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDLENBQUMsQ0FBQyIsImZpbGUiOiJkaXN0L3Rlc3QvZXhhbXBsZTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIElTIEFVVE8gR0VORVJBVEVEIFRFU1QgQ09ERSwgRE8gTk9UIE1PRElGWSBESVJFQ1RMWVxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL3Nob3VsZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9tb2NoYS5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9ub2RlLmQudHNcIiAvPlxucmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xucmVxdWlyZShcInNob3VsZFwiKTtcblxuaW1wb3J0ICogYXMgUnggZnJvbSBcInJ4XCI7XG5pbXBvcnQgKiBhcyBBeCBmcm9tIFwiLi4vc3JjL2FuaW1heGVcIjtcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi4vc3JjL2hlbHBlclwiO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gXCIuLi9zcmMvZXZlbnRzXCI7XG5pbXBvcnQgKiBhcyBQYXJhbWV0ZXIgZnJvbSBcIi4uL3NyYy9QYXJhbWV0ZXJcIjtcblxudmFyIGFuaW1hdG9yOiBBeC5BbmltYXRvciA9IGhlbHBlci5nZXRFeGFtcGxlQW5pbWF0b3IoMTAwLCAxMDApO1xuXG52YXIgcmVkICAgPSAyNTU7XG52YXIgZ3JlZW4gPSA1MDtcbnZhciBibHVlID0gNTA7XG5cbmZ1bmN0aW9uIGZvcmV2ZXJEb3Qoc2l6ZTogbnVtYmVyLCBjc3NfY29sb3I6IEF4LkNvbG9yQXJnKTogQXguT3BlcmF0aW9uIHtcbiAgICByZXR1cm4gQXguY3JlYXRlKCkuZmlsbFN0eWxlKGNzc19jb2xvcikuZmlsbFJlY3QoWy1zaXplLzIsIC1zaXplLzJdLCBbc2l6ZSwgc2l6ZV0pO1xufVxuXG52YXIgYmlnU2luICA9IFBhcmFtZXRlci5zaW4oUGFyYW1ldGVyLnQoKS5tYXBWYWx1ZSh0ID0+IHQgKiBNYXRoLlBJKSkubWFwVmFsdWUoeCA9PiBNYXRoLnJvdW5kKHggKiA0MCArIDUwKSk7XG52YXIgYmlnQ29zICA9IFBhcmFtZXRlci5jb3MoUGFyYW1ldGVyLnQoKS5tYXBWYWx1ZSh0ID0+IHQgKiBNYXRoLlBJKSkubWFwVmFsdWUoeCA9PiBNYXRoLnJvdW5kKHggKiA0MCArIDUwKSk7XG52YXIgZmFzdENvcyA9IFBhcmFtZXRlci5jb3MoUGFyYW1ldGVyLnQoKS5tYXBWYWx1ZSh0ID0+IDIgKiB0ICogTWF0aC5QSSkpLm1hcFZhbHVlKHggPT4gTWF0aC5yb3VuZCh4ICogMzggKyA1MCkpO1xudmFyIGZhc3RTaW4gPSBQYXJhbWV0ZXIuc2luKFBhcmFtZXRlci50KCkubWFwVmFsdWUodCA9PiAyICogdCAqIE1hdGguUEkpKS5tYXBWYWx1ZSh4ID0+IE1hdGgucm91bmQoeCAqIDM4ICsgNTApKTtcblxuLy9lYWNoIGZyYW1lLCBmaXJzdCBkcmF3IGJsYWNrIGJhY2tncm91bmQgdG8gZXJhc2UgdGhlIHByZXZpb3VzIGNvbnRlbnRzXG5hbmltYXRvci5wbGF5KEF4LmNyZWF0ZSgpLmZpbGxTdHlsZShcIiMwMDAwMDBcIikuZmlsbFJlY3QoWzAsMF0sWzEwMCwxMDBdKSk7XG5cbi8vIHdlIGRyYXcgc2luZ2xlIHBpeGVscyBvZiBkaWZmZXJlbnQgaHVlcyBtb3Zpbmcgb24gYSBjaXJjbGUgY2lyY3VtZmVyZW5jZVxuYW5pbWF0b3IucGxheShcbiAgICBBeC5jcmVhdGUoKS5wYXJhbGxlbChbXG4gICAgICAgIEF4LmNyZWF0ZSgpLnRyYW5zbGF0ZShQYXJhbWV0ZXIucG9pbnQoZmFzdENvcywgZmFzdFNpbikpLnBpcGUoZm9yZXZlckRvdCgxLCBQYXJhbWV0ZXIuaHNsKDEyMCwgMjAsIDEwKSkpLFxuICAgICAgICBBeC5jcmVhdGUoKS50cmFuc2xhdGUoUGFyYW1ldGVyLnBvaW50KGJpZ0NvcywgYmlnU2luKSkgIC5waXBlKGZvcmV2ZXJEb3QoMSwgUGFyYW1ldGVyLmhzbCgyNDAsIDIwLCAzMCkpKSxcbiAgICAgICAgQXguY3JlYXRlKCkudHJhbnNsYXRlKFBhcmFtZXRlci5wb2ludChiaWdTaW4sIGJpZ0NvcykpICAucGlwZShmb3JldmVyRG90KDEsIFBhcmFtZXRlci5oc2woNjAsIDIwLCAyNSkpKVxuICAgIF0pXG4pO1xuXG4vLyB3ZSBhcHBseSBhIGdsb3cgZmlsdGVyIGxhc3RcbmFuaW1hdG9yLnBsYXkoQXguY3JlYXRlKCkuZ2xvdygwLjAxKSk7XG5cbmhlbHBlci5wbGF5RXhhbXBsZShcImV4YW1wbGU0XCIsIDIwLCBhbmltYXRvciwgMTAwLCAxMDApO1xuXG5cbmRlc2NyaWJlKCdleGFtcGxlNCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCAoJ3Nob3VsZCBtYXRjaCB0aGUgcmVmZXJlbmNlJywgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICBoZWxwZXIuc2FtZUV4YW1wbGUoXCJleGFtcGxlNFwiLCBcImV4YW1wbGU0LXJlZlwiLCBmdW5jdGlvbihlcXVhbCkge1xuICAgICAgICAgICAgZXF1YWwuc2hvdWxkLmVxdWFsKHRydWUpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KVxuICAgIH0pO1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
