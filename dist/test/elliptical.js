// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var svg = require("../src/svg");
var animator = helper.getExampleAnimator(100, 100);
var cases = [
    /*
    'M10 20 A15 15 0 0 0 30 20', // checked against SVG behaviour
    'M40 20 A15 15 0 0 1 60 20', // checked against SVG behaviour
    'M70 20 A15 15 0 1 0 90 20', // checked against SVG behaviour
    'M10 50 A15 15 0 1 1 30 50', // checked against SVG behaviour
    
    'M50 40 A15 15 0 0 0 50 60', // checked against SVG behaviour
    'M80 40 A15 15 0 0 1 80 60', // checked against SVG behaviour
    'M20 70 A15 15 0 1 0 20 90', // checked against SVG behaviour
    'M50 70 A15 15 0 1 1 50 90', // checked against SVG behaviour
    */
    'M80 70 A5 5 0 1 1 80 90',
];
for (var t = 0; t < Math.PI * 2; t += 0.1) {
    var x = Math.sin(t) * 15 + 50;
    var y = Math.cos(t) * 15 + 50;
}
for (var i = 0; i < cases.length; i++) {
    animator.play(svg.svgpath(Ax.create().beginPath().strokeStyle("red"), cases[i]).stroke());
}
helper.playExample("elliptical", 1, animator, 100, 100);
describe('elliptical', function () {
    it('should match the reference', function (done) {
        helper.sameExample("elliptical", "elliptical-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEO0FBQzNELDZDQUE2QztBQUM3Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUlsQixJQUFZLEVBQUUsV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3JDLElBQVksTUFBTSxXQUFNLGVBQWUsQ0FBQyxDQUFBO0FBR3hDLElBQVksR0FBRyxXQUFNLFlBQVksQ0FBQyxDQUFBO0FBRWxDLElBQUksUUFBUSxHQUFnQixNQUFNLENBQUMsa0JBQWtCLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRWhFLElBQUksS0FBSyxHQUFHO0lBQ1I7Ozs7Ozs7Ozs7TUFVRTtJQUNGLHlCQUF5QjtDQUM1QixDQUFDO0FBRUYsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFHLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztJQUN6QyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7SUFDOUIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxDQUFDO0FBR2xDLENBQUM7QUFDRCxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO0lBQ3BDLFFBQVEsQ0FBQyxJQUFJLENBQ1QsR0FBRyxDQUFDLE9BQU8sQ0FDUCxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQ1gsQ0FBQyxNQUFNLEVBQUUsQ0FDYixDQUFDO0FBQ04sQ0FBQztBQUdELE1BQU0sQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRXhELFFBQVEsQ0FBQyxZQUFZLEVBQUU7SUFDbkIsRUFBRSxDQUFFLDRCQUE0QixFQUFFLFVBQVMsSUFBSTtRQUMzQyxNQUFNLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxnQkFBZ0IsRUFBRSxVQUFTLEtBQUs7WUFDN0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiZGlzdC90ZXN0L2VsbGlwdGljYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUSElTIElTIEFVVE8gR0VORVJBVEVEIFRFU1QgQ09ERSwgRE8gTk9UIE1PRElGWSBESVJFQ1RMWVxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL3Nob3VsZC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9tb2NoYS5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9ub2RlLmQudHNcIiAvPlxucmVxdWlyZSgnc291cmNlLW1hcC1zdXBwb3J0JykuaW5zdGFsbCgpO1xucmVxdWlyZShcInNob3VsZFwiKTtcblxuXG5pbXBvcnQgKiBhcyBSeCBmcm9tIFwicnhcIjtcbmltcG9ydCAqIGFzIEF4IGZyb20gXCIuLi9zcmMvYW5pbWF4ZVwiO1xuaW1wb3J0ICogYXMgaGVscGVyIGZyb20gXCIuLi9zcmMvaGVscGVyXCI7XG5pbXBvcnQgKiBhcyBldmVudHMgZnJvbSBcIi4uL3NyYy9ldmVudHNcIjtcbmltcG9ydCAqIGFzIFBhcmFtZXRlciBmcm9tIFwiLi4vc3JjL1BhcmFtZXRlclwiO1xuaW1wb3J0ICogYXMgc3ZnIGZyb20gXCIuLi9zcmMvc3ZnXCI7XG5cbnZhciBhbmltYXRvcjogQXguQW5pbWF0b3IgPSBoZWxwZXIuZ2V0RXhhbXBsZUFuaW1hdG9yKDEwMCwgMTAwKTtcblxudmFyIGNhc2VzID0gW1xuICAgIC8qXG4gICAgJ00xMCAyMCBBMTUgMTUgMCAwIDAgMzAgMjAnLCAvLyBjaGVja2VkIGFnYWluc3QgU1ZHIGJlaGF2aW91clxuICAgICdNNDAgMjAgQTE1IDE1IDAgMCAxIDYwIDIwJywgLy8gY2hlY2tlZCBhZ2FpbnN0IFNWRyBiZWhhdmlvdXJcbiAgICAnTTcwIDIwIEExNSAxNSAwIDEgMCA5MCAyMCcsIC8vIGNoZWNrZWQgYWdhaW5zdCBTVkcgYmVoYXZpb3VyXG4gICAgJ00xMCA1MCBBMTUgMTUgMCAxIDEgMzAgNTAnLCAvLyBjaGVja2VkIGFnYWluc3QgU1ZHIGJlaGF2aW91clxuICAgIFxuICAgICdNNTAgNDAgQTE1IDE1IDAgMCAwIDUwIDYwJywgLy8gY2hlY2tlZCBhZ2FpbnN0IFNWRyBiZWhhdmlvdXJcbiAgICAnTTgwIDQwIEExNSAxNSAwIDAgMSA4MCA2MCcsIC8vIGNoZWNrZWQgYWdhaW5zdCBTVkcgYmVoYXZpb3VyXG4gICAgJ00yMCA3MCBBMTUgMTUgMCAxIDAgMjAgOTAnLCAvLyBjaGVja2VkIGFnYWluc3QgU1ZHIGJlaGF2aW91clxuICAgICdNNTAgNzAgQTE1IDE1IDAgMSAxIDUwIDkwJywgLy8gY2hlY2tlZCBhZ2FpbnN0IFNWRyBiZWhhdmlvdXJcbiAgICAqL1xuICAgICdNODAgNzAgQTUgNSAwIDEgMSA4MCA5MCcsXG5dO1xuXG5mb3IgKHZhciB0ID0gMDsgdCA8IE1hdGguUEkgKiAyIDsgdCArPSAwLjEpIHtcbiAgICB2YXIgeCA9IE1hdGguc2luKHQpICogMTUgKyA1MDtcbiAgICB2YXIgeSA9IE1hdGguY29zKHQpICogMTUgKyA1MDtcbiAgICBcbiAgICAvLyBjYXNlcy5wdXNoKCdNNTAgNTAgQTUgNSAwIDEgMSAnICsgeCArICcgJyArIHkpO1xufVxuZm9yICh2YXIgaSA9IDA7IGkgPCBjYXNlcy5sZW5ndGg7IGkrKykge1xuICAgIGFuaW1hdG9yLnBsYXkoXG4gICAgICAgIHN2Zy5zdmdwYXRoKFxuICAgICAgICAgICAgQXguY3JlYXRlKCkuYmVnaW5QYXRoKCkuc3Ryb2tlU3R5bGUoXCJyZWRcIiksXG4gICAgICAgICAgICBjYXNlc1tpXVxuICAgICAgICApLnN0cm9rZSgpXG4gICAgKTsgICBcbn1cblxuIFxuaGVscGVyLnBsYXlFeGFtcGxlKFwiZWxsaXB0aWNhbFwiLCAxLCBhbmltYXRvciwgMTAwLCAxMDApO1xuXG5kZXNjcmliZSgnZWxsaXB0aWNhbCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCAoJ3Nob3VsZCBtYXRjaCB0aGUgcmVmZXJlbmNlJywgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICBoZWxwZXIuc2FtZUV4YW1wbGUoXCJlbGxpcHRpY2FsXCIsIFwiZWxsaXB0aWNhbC1yZWZcIiwgZnVuY3Rpb24oZXF1YWwpIHtcbiAgICAgICAgICAgIGVxdWFsLnNob3VsZC5lcXVhbCh0cnVlKTtcbiAgICAgICAgICAgIGRvbmUoKTtcbiAgICAgICAgfSlcbiAgICB9KTtcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
