// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/Parameter");
var animator = helper.getExampleAnimator();
// fixed base color for particles
var red = 255, green = 50, blue = 50;
// alpha fades out to make the particles evaporate over time
var alpha = Parameter.t().mapValue(function (t) { return 0.1 / (t * 5 + 0.1); });
// our base particle is of variable size and color
function permDot(size, css_color) {
    return Ax.create().fillStyle(css_color).fillRect([-size / 2, -size / 2], [size, size]);
}
// Reset seed once via sideeffect
// this is a bit shitty we need an eval maybe?
animator.play(Ax.create().take(1).affect(function () { return function (tick, param1) { }; }, Parameter.seedrnd("seed")));
// each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
// a ring of exploding particles that fade our
animator.play(Ax.create()
    .globalCompositeOperation("lighter") // use additive blending
    .clone(500, Ax.create() // clone 500 particles
    .translate([50, 50]) // move to center of canvas
    .velocity(Parameter.first(Parameter.rndNormal(50))) // choose a random direction
    .parallel([
    permDot(1, Parameter.rgba(red, green, blue, alpha)),
    permDot(5, Parameter.rgba(red, green, blue, alpha)) // with a dimmer surround
])));
helper.playExample("example3", 15, animator, 100, 100);
describe('example3', function () {
    it('should match the reference', function (done) {
        helper.sameExample("example3", "example3-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsicGVybURvdCJdLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEO0FBQzNELDZDQUE2QztBQUM3Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUdsQixJQUFZLEVBQUUsV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3JDLElBQVksTUFBTSxXQUFNLGVBQWUsQ0FBQyxDQUFBO0FBRXhDLElBQVksU0FBUyxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFFOUMsSUFBSSxRQUFRLEdBQWdCLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBRXhELGlDQUFpQztBQUNqQyxJQUFJLEdBQUcsR0FBRyxHQUFHLEVBQUUsS0FBSyxHQUFHLEVBQUUsRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDO0FBQ3JDLDREQUE0RDtBQUM1RCxJQUFJLEtBQUssR0FBRyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBakIsQ0FBaUIsQ0FBQyxDQUFDO0FBRTNELGtEQUFrRDtBQUNsRCxpQkFBaUIsSUFBWSxFQUFFLFNBQXNCO0lBQ2pEQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQSxTQUFTQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxHQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxHQUFDQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUN2RkEsQ0FBQ0E7QUFFRCxpQ0FBaUM7QUFDakMsOENBQThDO0FBQzlDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQ3BDLGNBQU0sT0FBQSxVQUFDLElBQUksRUFBRSxNQUFZLElBQU0sQ0FBQyxFQUExQixDQUEwQixFQUNoQyxTQUFTLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUM1QixDQUFDLENBQUM7QUFFSCx5RUFBeUU7QUFDekUsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUUsOENBQThDO0FBQzlDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRTtLQUNwQix3QkFBd0IsQ0FBQyxTQUFTLENBQUMsQ0FBMEIsd0JBQXdCO0tBQ3JGLEtBQUssQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUF1QyxzQkFBc0I7S0FDL0UsU0FBUyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQXNDLDJCQUEyQjtLQUNwRixRQUFRLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBTyw0QkFBNEI7S0FDckYsUUFBUSxDQUFDO0lBQ04sT0FBTyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25ELE9BQU8sQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFHLHlCQUF5QjtDQUNsRixDQUFDLENBQ0wsQ0FDSixDQUFDO0FBRUYsTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLEVBQUUsRUFBRSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFHdkQsUUFBUSxDQUFDLFVBQVUsRUFBRTtJQUNqQixFQUFFLENBQUUsNEJBQTRCLEVBQUUsVUFBUyxJQUFJO1FBQzNDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLGNBQWMsRUFBRSxVQUFTLEtBQUs7WUFDekQsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiZGlzdC90ZXN0L2V4YW1wbGUzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBJUyBBVVRPIEdFTkVSQVRFRCBURVNUIENPREUsIERPIE5PVCBNT0RJRlkgRElSRUNUTFlcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9zaG91bGQuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbW9jaGEuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbm9kZS5kLnRzXCIgLz5cbnJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcbnJlcXVpcmUoXCJzaG91bGRcIik7XG5cbmltcG9ydCAqIGFzIFJ4IGZyb20gXCJyeFwiO1xuaW1wb3J0ICogYXMgQXggZnJvbSBcIi4uL3NyYy9hbmltYXhlXCI7XG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4uL3NyYy9oZWxwZXJcIjtcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tIFwiLi4vc3JjL2V2ZW50c1wiO1xuaW1wb3J0ICogYXMgUGFyYW1ldGVyIGZyb20gXCIuLi9zcmMvUGFyYW1ldGVyXCI7XG5cbnZhciBhbmltYXRvcjogQXguQW5pbWF0b3IgPSBoZWxwZXIuZ2V0RXhhbXBsZUFuaW1hdG9yKCk7XG5cbi8vIGZpeGVkIGJhc2UgY29sb3IgZm9yIHBhcnRpY2xlc1xudmFyIHJlZCA9IDI1NSwgZ3JlZW4gPSA1MCwgYmx1ZSA9IDUwO1xuLy8gYWxwaGEgZmFkZXMgb3V0IHRvIG1ha2UgdGhlIHBhcnRpY2xlcyBldmFwb3JhdGUgb3ZlciB0aW1lXG52YXIgYWxwaGEgPSBQYXJhbWV0ZXIudCgpLm1hcFZhbHVlKHQgPT4gMC4xIC8gKHQqNSArIDAuMSkpO1xuXG4vLyBvdXIgYmFzZSBwYXJ0aWNsZSBpcyBvZiB2YXJpYWJsZSBzaXplIGFuZCBjb2xvclxuZnVuY3Rpb24gcGVybURvdChzaXplOiBudW1iZXIsIGNzc19jb2xvcjogQXguQ29sb3JBcmcpOiBBeC5BbmltYXRpb24ge1xuICAgIHJldHVybiBBeC5jcmVhdGUoKS5maWxsU3R5bGUoY3NzX2NvbG9yKS5maWxsUmVjdChbLXNpemUvMiwgLXNpemUvMl0sIFtzaXplLCBzaXplXSk7XG59XG5cbi8vIFJlc2V0IHNlZWQgb25jZSB2aWEgc2lkZWVmZmVjdFxuLy8gdGhpcyBpcyBhIGJpdCBzaGl0dHkgd2UgbmVlZCBhbiBldmFsIG1heWJlP1xuYW5pbWF0b3IucGxheShBeC5jcmVhdGUoKS50YWtlKDEpLmFmZmVjdChcbiAgICAoKSA9PiAodGljaywgcGFyYW0xOiB2b2lkKSA9PiB7fSxcbiAgICBQYXJhbWV0ZXIuc2VlZHJuZChcInNlZWRcIilcbikpO1xuXG4vLyBlYWNoIGZyYW1lLCBmaXJzdCBkcmF3IGJsYWNrIGJhY2tncm91bmQgdG8gZXJhc2UgdGhlIHByZXZpb3VzIGNvbnRlbnRzXG5hbmltYXRvci5wbGF5KEF4LmNyZWF0ZSgpLmZpbGxTdHlsZShcIiMwMDAwMDBcIikuZmlsbFJlY3QoWzAsMF0sWzEwMCwxMDBdKSk7XG4vLyBhIHJpbmcgb2YgZXhwbG9kaW5nIHBhcnRpY2xlcyB0aGF0IGZhZGUgb3VyXG5hbmltYXRvci5wbGF5KEF4LmNyZWF0ZSgpXG4gICAgLmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbihcImxpZ2h0ZXJcIikgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVzZSBhZGRpdGl2ZSBibGVuZGluZ1xuICAgIC5jbG9uZSg1MDAsIEF4LmNyZWF0ZSgpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY2xvbmUgNTAwIHBhcnRpY2xlc1xuICAgICAgICAudHJhbnNsYXRlKFs1MCwgNTBdKSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSB0byBjZW50ZXIgb2YgY2FudmFzXG4gICAgICAgIC52ZWxvY2l0eShQYXJhbWV0ZXIuZmlyc3QoUGFyYW1ldGVyLnJuZE5vcm1hbCg1MCkpKSAgICAgICAvLyBjaG9vc2UgYSByYW5kb20gZGlyZWN0aW9uXG4gICAgICAgIC5wYXJhbGxlbChbICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkcmF3IG92ZXJsYXBwaW5nIHBhcnRpY2xlc1xuICAgICAgICAgICAgcGVybURvdCgxLCBQYXJhbWV0ZXIucmdiYShyZWQsIGdyZWVuLCBibHVlLCBhbHBoYSkpLCAgLy8gc28gdGhlIGNlbnRlciBpcyBicmlnaHRlclxuICAgICAgICAgICAgcGVybURvdCg1LCBQYXJhbWV0ZXIucmdiYShyZWQsIGdyZWVuLCBibHVlLCBhbHBoYSkpICAgLy8gd2l0aCBhIGRpbW1lciBzdXJyb3VuZFxuICAgICAgICBdKVxuICAgIClcbik7XG5cbmhlbHBlci5wbGF5RXhhbXBsZShcImV4YW1wbGUzXCIsIDE1LCBhbmltYXRvciwgMTAwLCAxMDApO1xuXG5cbmRlc2NyaWJlKCdleGFtcGxlMycsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCAoJ3Nob3VsZCBtYXRjaCB0aGUgcmVmZXJlbmNlJywgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICBoZWxwZXIuc2FtZUV4YW1wbGUoXCJleGFtcGxlM1wiLCBcImV4YW1wbGUzLXJlZlwiLCBmdW5jdGlvbihlcXVhbCkge1xuICAgICAgICAgICAgZXF1YWwuc2hvdWxkLmVxdWFsKHRydWUpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KVxuICAgIH0pO1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
