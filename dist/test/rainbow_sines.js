// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/Parameter");
var animator = helper.getExampleAnimator();
function foreverDot(size, css_color) {
    return Ax.create().fillStyle(css_color).fillRect([-size / 2, -size / 2], [size, size]);
}
var WIDTH = 100;
var HEIGHT = 100;
var SINS = 3;
// todo promote to numberArg
var range = function (min, max) {
    return Array.apply(null, Array(max - min)).map(function (_, i) { return i + min; });
};
//each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
animator.play(Ax.create().parallel(range(0, WIDTH).map(function (x) {
    // for each index we create a 10 sinwaves
    return Ax.create().parallel(range(0, SINS).map(function (i) {
        return Ax.create()
            .translate(Parameter.point(x, Parameter.sin(Parameter.t().mapValue(function (t) { return Math.sin(t + i * 4 + x / WIDTH) * 10 + t / 2 + x / WIDTH * Math.PI + i / SINS * Math.PI * 2; }))
            .mapValue(function (s) { return HEIGHT * (0.45 * s + 0.5); })))
            .pipe(foreverDot(3, Parameter.rgba(255, Parameter.sin(Parameter.t().mapValue(function (t) { return x / WIDTH + t * 2 + i; })).mapValue(function (s) { return s * 125 + 125; }), 0, 1)));
    }));
})));
helper.playExample("rainbow_sines", 32, animator, WIDTH, 100);
describe('rainbow_sines', function () {
    it('should match the reference', function (done) {
        helper.sameExample("rainbow_sines", "rainbow_sines-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsiZm9yZXZlckRvdCJdLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEO0FBQzNELDZDQUE2QztBQUM3Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUdsQixJQUFZLEVBQUUsV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3JDLElBQVksTUFBTSxXQUFNLGVBQWUsQ0FBQyxDQUFBO0FBRXhDLElBQVksU0FBUyxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFFOUMsSUFBSSxRQUFRLEdBQWdCLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0FBRXhELG9CQUFvQixJQUFZLEVBQUUsU0FBc0I7SUFDcERBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLE1BQU1BLEVBQUVBLENBQUNBLFNBQVNBLENBQUNBLFNBQVNBLENBQUNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLEdBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLEdBQUNBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBLENBQUNBO0FBQ3ZGQSxDQUFDQTtBQUdELElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQztBQUNoQixJQUFJLE1BQU0sR0FBRyxHQUFHLENBQUM7QUFDakIsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO0FBRWIsNEJBQTRCO0FBQzVCLElBQUksS0FBSyxHQUNILFVBQUMsR0FBVyxFQUFFLEdBQVc7V0FDdkIsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLElBQUcsTUFBTSxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQSxDQUFDLENBQUM7QUFBMUUsQ0FBMEUsQ0FBQztBQUVuRix3RUFBd0U7QUFDeEUsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBQyxDQUFDLENBQUMsRUFBQyxDQUFDLEdBQUcsRUFBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFHMUUsUUFBUSxDQUFDLElBQUksQ0FDVCxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUNoQixLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7SUFDakIseUNBQXlDO0lBQ3pDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsUUFBUSxDQUN2QixLQUFLLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxVQUFBLENBQUM7UUFDaEIsTUFBTSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUU7YUFDYixTQUFTLENBQ1YsU0FBUyxDQUFDLEtBQUssQ0FDWCxDQUFDLEVBQ0QsU0FBUyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFDLENBQUMsR0FBRyxDQUFDLEdBQUUsS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUMsR0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEVBQXBGLENBQW9GLENBQUMsQ0FBQzthQUMzSCxRQUFRLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxNQUFNLEdBQUcsQ0FBQyxJQUFJLEdBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUF2QixDQUF1QixDQUFDLENBRTlDLENBQ0o7YUFDQSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEdBQUcsS0FBSyxHQUFHLENBQUMsR0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFuQixDQUFtQixDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEdBQUMsR0FBRyxHQUFHLEdBQUcsRUFBWCxDQUFXLENBQUMsRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQy9JLENBQUMsQ0FBQyxDQUNMLENBQUM7QUFDTixDQUFDLENBQUMsQ0FDTCxDQUNKLENBQUM7QUFHRixNQUFNLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxFQUFFLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztBQUM5RCxRQUFRLENBQUMsZUFBZSxFQUFFO0lBQ3RCLEVBQUUsQ0FBRSw0QkFBNEIsRUFBRSxVQUFTLElBQUk7UUFDM0MsTUFBTSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsbUJBQW1CLEVBQUUsVUFBUyxLQUFLO1lBQ25FLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pCLElBQUksRUFBRSxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUE7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6ImRpc3QvdGVzdC9yYWluYm93X3NpbmVzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVEhJUyBJUyBBVVRPIEdFTkVSQVRFRCBURVNUIENPREUsIERPIE5PVCBNT0RJRlkgRElSRUNUTFlcbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9zaG91bGQuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbW9jaGEuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbm9kZS5kLnRzXCIgLz5cbnJlcXVpcmUoJ3NvdXJjZS1tYXAtc3VwcG9ydCcpLmluc3RhbGwoKTtcbnJlcXVpcmUoXCJzaG91bGRcIik7XG5cbmltcG9ydCAqIGFzIFJ4IGZyb20gXCJyeFwiO1xuaW1wb3J0ICogYXMgQXggZnJvbSBcIi4uL3NyYy9hbmltYXhlXCI7XG5pbXBvcnQgKiBhcyBoZWxwZXIgZnJvbSBcIi4uL3NyYy9oZWxwZXJcIjtcbmltcG9ydCAqIGFzIGV2ZW50cyBmcm9tIFwiLi4vc3JjL2V2ZW50c1wiO1xuaW1wb3J0ICogYXMgUGFyYW1ldGVyIGZyb20gXCIuLi9zcmMvUGFyYW1ldGVyXCI7XG5cbnZhciBhbmltYXRvcjogQXguQW5pbWF0b3IgPSBoZWxwZXIuZ2V0RXhhbXBsZUFuaW1hdG9yKCk7XG5cbmZ1bmN0aW9uIGZvcmV2ZXJEb3Qoc2l6ZTogbnVtYmVyLCBjc3NfY29sb3I6IEF4LkNvbG9yQXJnKTogQXguQW5pbWF0aW9uIHtcbiAgICByZXR1cm4gQXguY3JlYXRlKCkuZmlsbFN0eWxlKGNzc19jb2xvcikuZmlsbFJlY3QoWy1zaXplLzIsIC1zaXplLzJdLCBbc2l6ZSwgc2l6ZV0pO1xufVxuXG5cbnZhciBXSURUSCA9IDEwMDtcbnZhciBIRUlHSFQgPSAxMDA7XG52YXIgU0lOUyA9IDM7XG5cbi8vIHRvZG8gcHJvbW90ZSB0byBudW1iZXJBcmdcbnZhciByYW5nZTogKG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikgPT4gbnVtYmVyW10gXG4gICAgPSAobWluOiBudW1iZXIsIG1heDogbnVtYmVyKSA9PiBcbiAgICAgICAgQXJyYXkuYXBwbHkobnVsbCwgQXJyYXkobWF4IC0gbWluKSkubWFwKGZ1bmN0aW9uIChfLCBpKSB7cmV0dXJuIGkgKyBtaW47fSk7XG5cbi8vZWFjaCBmcmFtZSwgZmlyc3QgZHJhdyBibGFjayBiYWNrZ3JvdW5kIHRvIGVyYXNlIHRoZSBwcmV2aW91cyBjb250ZW50c1xuYW5pbWF0b3IucGxheShBeC5jcmVhdGUoKS5maWxsU3R5bGUoXCIjMDAwMDAwXCIpLmZpbGxSZWN0KFswLDBdLFsxMDAsMTAwXSkpO1xuXG5cbmFuaW1hdG9yLnBsYXkoXG4gICAgQXguY3JlYXRlKCkucGFyYWxsZWwoXG4gICAgICAgIHJhbmdlKDAsIFdJRFRIKS5tYXAoeCA9PiB7XG4gICAgICAgICAgICAvLyBmb3IgZWFjaCBpbmRleCB3ZSBjcmVhdGUgYSAxMCBzaW53YXZlc1xuICAgICAgICAgICAgcmV0dXJuIEF4LmNyZWF0ZSgpLnBhcmFsbGVsKFxuICAgICAgICAgICAgICAgIHJhbmdlKDAsIFNJTlMpLm1hcChpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEF4LmNyZWF0ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudHJhbnNsYXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgUGFyYW1ldGVyLnBvaW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBhcmFtZXRlci5zaW4oUGFyYW1ldGVyLnQoKS5tYXBWYWx1ZSh0ID0+IE1hdGguc2luKHQgKyBpKjQgKyB4LyBXSURUSCkgKiAxMCArIHQvMiArIHggLyBXSURUSCAqIE1hdGguUEkgKyBpL1NJTlMgKiBNYXRoLlBJICogMikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXBWYWx1ZShzID0+IEhFSUdIVCAqICgwLjQ1KnMgKyAwLjUpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIC5waXBlKGZvcmV2ZXJEb3QoMywgUGFyYW1ldGVyLnJnYmEoMjU1LCBQYXJhbWV0ZXIuc2luKFBhcmFtZXRlci50KCkubWFwVmFsdWUodCA9PiB4IC8gV0lEVEggKyB0KjIgKyBpKSkubWFwVmFsdWUocyA9PiBzKjEyNSArIDEyNSksIDAsMSkpKTsgIFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApOyAgIFxuICAgICAgICB9KVxuICAgIClcbik7XG5cblxuaGVscGVyLnBsYXlFeGFtcGxlKFwicmFpbmJvd19zaW5lc1wiLCAzMiwgYW5pbWF0b3IsIFdJRFRILCAxMDApO1xuZGVzY3JpYmUoJ3JhaW5ib3dfc2luZXMnLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQgKCdzaG91bGQgbWF0Y2ggdGhlIHJlZmVyZW5jZScsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgaGVscGVyLnNhbWVFeGFtcGxlKFwicmFpbmJvd19zaW5lc1wiLCBcInJhaW5ib3dfc2luZXMtcmVmXCIsIGZ1bmN0aW9uKGVxdWFsKSB7XG4gICAgICAgICAgICBlcXVhbC5zaG91bGQuZXF1YWwodHJ1ZSk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pXG4gICAgfSk7XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
