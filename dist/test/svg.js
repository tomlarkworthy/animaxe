// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/Parameter");
var svg = require("../src/svg");
var animator = helper.getExampleAnimator(100, 100);
//each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
animator.play(svg.svgpath(Ax.create().beginPath().strokeStyle("blue"), 'M3,7 5-6 L1,7 1e2-.4 m-10,10 l10,0  ' +
    'V27 89 H23           v10 h10             ' +
    'C33,43 38,47 43,47   c0,5 5,10 10,10     ' +
    //  'S63,67 63,67         s-10,10 10,10       ' +  // smooth curve to
    //  'Q50,50 73,57         q20,-5 0,-10        ' +  // NaN quadratic curve :/
    //  'T70,40               t0,-15              ' +  // smooth quadratic curve to
    'A5,5 45 1,0 40,20    a5,5 20 0,1 -10-10  z').stroke());
// Using http://anthonydugois.com/svg-path-builder/
animator.play(svg.svgpath(Ax.create().beginPath().strokeStyle("yellow").lineWidth(20).scale([0.1, 0.1]), 'M350 300 a50 50 0 1 0 -200 0 c0 100 200 0 200 100 a50 50 0 1 1 -200 0 ' +
    'M400 250 V%1 L500 500 L600 400 V250 ' +
    'M850 300 A50 50 0 1 0 650 300 V400 A50 50 0 1 0 850 400 V350 H750', Parameter.cos(Parameter.t()).mapValue(function (x) { return x * 400; })).stroke());
helper.playExample("svg", 10, animator, 100, 100);
describe('svg', function () {
    it('should match the reference', function (done) {
        helper.sameExample("svg", "svg-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkRBQTJEO0FBQzNELDZDQUE2QztBQUM3Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQ3hDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUdsQixJQUFZLEVBQUUsV0FBTSxnQkFBZ0IsQ0FBQyxDQUFBO0FBQ3JDLElBQVksTUFBTSxXQUFNLGVBQWUsQ0FBQyxDQUFBO0FBRXhDLElBQVksU0FBUyxXQUFNLGtCQUFrQixDQUFDLENBQUE7QUFDOUMsSUFBWSxHQUFHLFdBQU0sWUFBWSxDQUFDLENBQUE7QUFFbEMsSUFBSSxRQUFRLEdBQWdCLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFFaEUsd0VBQXdFO0FBQ3hFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUNuRSxzQ0FBc0M7SUFDdEMsMkNBQTJDO0lBQzNDLDJDQUEyQztJQUM3QyxxRUFBcUU7SUFDckUsNEVBQTRFO0lBQzVFLCtFQUErRTtJQUM3RSw0Q0FBNEMsQ0FDM0MsQ0FBQyxNQUFNLEVBQUUsQ0FDWCxDQUFDO0FBSUYsbURBQW1EO0FBRW5ELFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFDckcsd0VBQXdFO0lBQ3hFLHNDQUFzQztJQUN0QyxtRUFBbUUsRUFBRSxTQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsR0FBRyxHQUFHLEVBQVAsQ0FBTyxDQUFDLENBQ3ZILENBQUMsTUFBTSxFQUFFLENBQ1gsQ0FBQztBQUdGLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRWxELFFBQVEsQ0FBQyxLQUFLLEVBQUU7SUFDWixFQUFFLENBQUUsNEJBQTRCLEVBQUUsVUFBUyxJQUFJO1FBQzNDLE1BQU0sQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxVQUFTLEtBQUs7WUFDL0MsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiZGlzdC90ZXN0L3N2Zy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRISVMgSVMgQVVUTyBHRU5FUkFURUQgVEVTVCBDT0RFLCBETyBOT1QgTU9ESUZZIERJUkVDVExZXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvc2hvdWxkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL21vY2hhLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL25vZGUuZC50c1wiIC8+XG5yZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKCk7XG5yZXF1aXJlKFwic2hvdWxkXCIpO1xuXG5pbXBvcnQgKiBhcyBSeCBmcm9tIFwicnhcIjtcbmltcG9ydCAqIGFzIEF4IGZyb20gXCIuLi9zcmMvYW5pbWF4ZVwiO1xuaW1wb3J0ICogYXMgaGVscGVyIGZyb20gXCIuLi9zcmMvaGVscGVyXCI7XG5pbXBvcnQgKiBhcyBldmVudHMgZnJvbSBcIi4uL3NyYy9ldmVudHNcIjtcbmltcG9ydCAqIGFzIFBhcmFtZXRlciBmcm9tIFwiLi4vc3JjL1BhcmFtZXRlclwiO1xuaW1wb3J0ICogYXMgc3ZnIGZyb20gXCIuLi9zcmMvc3ZnXCI7XG5cbnZhciBhbmltYXRvcjogQXguQW5pbWF0b3IgPSBoZWxwZXIuZ2V0RXhhbXBsZUFuaW1hdG9yKDEwMCwgMTAwKTtcblxuLy9lYWNoIGZyYW1lLCBmaXJzdCBkcmF3IGJsYWNrIGJhY2tncm91bmQgdG8gZXJhc2UgdGhlIHByZXZpb3VzIGNvbnRlbnRzXG5hbmltYXRvci5wbGF5KEF4LmNyZWF0ZSgpLmZpbGxTdHlsZShcIiMwMDAwMDBcIikuZmlsbFJlY3QoWzAsMF0sWzEwMCwxMDBdKSk7XG5cbmFuaW1hdG9yLnBsYXkoc3ZnLnN2Z3BhdGgoQXguY3JlYXRlKCkuYmVnaW5QYXRoKCkuc3Ryb2tlU3R5bGUoXCJibHVlXCIpLFxuICAnTTMsNyA1LTYgTDEsNyAxZTItLjQgbS0xMCwxMCBsMTAsMCAgJyArXG4gICdWMjcgODkgSDIzICAgICAgICAgICB2MTAgaDEwICAgICAgICAgICAgICcgK1xuICAnQzMzLDQzIDM4LDQ3IDQzLDQ3ICAgYzAsNSA1LDEwIDEwLDEwICAgICAnICtcbi8vICAnUzYzLDY3IDYzLDY3ICAgICAgICAgcy0xMCwxMCAxMCwxMCAgICAgICAnICsgIC8vIHNtb290aCBjdXJ2ZSB0b1xuLy8gICdRNTAsNTAgNzMsNTcgICAgICAgICBxMjAsLTUgMCwtMTAgICAgICAgICcgKyAgLy8gTmFOIHF1YWRyYXRpYyBjdXJ2ZSA6L1xuLy8gICdUNzAsNDAgICAgICAgICAgICAgICB0MCwtMTUgICAgICAgICAgICAgICcgKyAgLy8gc21vb3RoIHF1YWRyYXRpYyBjdXJ2ZSB0b1xuICAnQTUsNSA0NSAxLDAgNDAsMjAgICAgYTUsNSAyMCAwLDEgLTEwLTEwICB6J1xuICApLnN0cm9rZSgpXG4pO1xuXG5cblxuLy8gVXNpbmcgaHR0cDovL2FudGhvbnlkdWdvaXMuY29tL3N2Zy1wYXRoLWJ1aWxkZXIvXG5cbmFuaW1hdG9yLnBsYXkoc3ZnLnN2Z3BhdGgoQXguY3JlYXRlKCkuYmVnaW5QYXRoKCkuc3Ryb2tlU3R5bGUoXCJ5ZWxsb3dcIikubGluZVdpZHRoKDIwKS5zY2FsZShbMC4xLCAwLjFdKSxcbiAgJ00zNTAgMzAwIGE1MCA1MCAwIDEgMCAtMjAwIDAgYzAgMTAwIDIwMCAwIDIwMCAxMDAgYTUwIDUwIDAgMSAxIC0yMDAgMCAnICsgXG4gICdNNDAwIDI1MCBWJTEgTDUwMCA1MDAgTDYwMCA0MDAgVjI1MCAnICtcbiAgJ004NTAgMzAwIEE1MCA1MCAwIDEgMCA2NTAgMzAwIFY0MDAgQTUwIDUwIDAgMSAwIDg1MCA0MDAgVjM1MCBINzUwJywgUGFyYW1ldGVyLmNvcyhQYXJhbWV0ZXIudCgpKS5tYXBWYWx1ZSh4ID0+IHggKiA0MDApXG4gICkuc3Ryb2tlKClcbik7XG5cbiBcbmhlbHBlci5wbGF5RXhhbXBsZShcInN2Z1wiLCAxMCwgYW5pbWF0b3IsIDEwMCwgMTAwKTtcblxuZGVzY3JpYmUoJ3N2ZycsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCAoJ3Nob3VsZCBtYXRjaCB0aGUgcmVmZXJlbmNlJywgZnVuY3Rpb24oZG9uZSkge1xuICAgICAgICBoZWxwZXIuc2FtZUV4YW1wbGUoXCJzdmdcIiwgXCJzdmctcmVmXCIsIGZ1bmN0aW9uKGVxdWFsKSB7XG4gICAgICAgICAgICBlcXVhbC5zaG91bGQuZXF1YWwodHJ1ZSk7XG4gICAgICAgICAgICBkb25lKCk7XG4gICAgICAgIH0pXG4gICAgfSk7XG59KTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
