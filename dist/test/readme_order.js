// THIS IS AUTO GENERATED TEST CODE, DO NOT MODIFY DIRECTLY
/// <reference path="../types/should.d.ts" />
/// <reference path="../types/mocha.d.ts" />
/// <reference path="../types/node.d.ts" />
require('source-map-support').install();
require("should");
var Ax = require("../src/animaxe");
var helper = require("../src/helper");
var Parameter = require("../src/Parameter");
var animator = helper.getExampleAnimator();
function flowNode(pos, label, id, active) {
    return Ax.create();
}
//each frame, first draw black background to erase the previous contents
animator.play(Ax.create().fillStyle("#000000").fillRect([0, 0], [100, 100]));
var timeline = Parameter.constant(1).take(1).then(Parameter.constant(1).take(2));
// move the drawing context frame of reference to the center (50,50) and then move it by a +ve x velocity,
// so the frame of reference moves over time.
// then draw our 2 frame spark animation in a loop so it draws forever
animator.play(flowNode([50, 50], "Ax.create()", 0, timeline));
// the helper function pipes injects the context, either from a web canvas or a fake node.js one.
helper.playExample("readme_order", 20, animator, 100, 100);
describe('readme_order', function () {
    it('should match the reference', function (done) {
        helper.sameExample("readme_order", "readme_order-ref", function (equal) {
            equal.should.equal(true);
            done();
        });
    });
});

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4YW1wbGUudGVtcGxhdGUudHMiXSwibmFtZXMiOlsiZmxvd05vZGUiXSwibWFwcGluZ3MiOiJBQUFBLDJEQUEyRDtBQUMzRCw2Q0FBNkM7QUFDN0MsNENBQTRDO0FBQzVDLDJDQUEyQztBQUMzQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztBQUN4QyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7QUFpQmxCLElBQVksRUFBRSxXQUFNLGdCQUFnQixDQUFDLENBQUE7QUFDckMsSUFBWSxNQUFNLFdBQU0sZUFBZSxDQUFDLENBQUE7QUFFeEMsSUFBWSxTQUFTLFdBQU0sa0JBQWtCLENBQUMsQ0FBQTtBQUU5QyxJQUFJLFFBQVEsR0FBZ0IsTUFBTSxDQUFDLGtCQUFrQixFQUFFLENBQUM7QUFFeEQsa0JBQWtCLEdBQXFCLEVBQUUsS0FBYSxFQUFFLEVBQVUsRUFBRSxNQUFtQztJQUNuR0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQUE7QUFDdEJBLENBQUNBO0FBQ0Qsd0VBQXdFO0FBQ3hFLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxHQUFHLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBRTFFLElBQUksUUFBUSxHQUNSLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDOUIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ2hDLENBQUE7QUFFTCwwR0FBMEc7QUFDMUcsNkNBQTZDO0FBQzdDLHNFQUFzRTtBQUN0RSxRQUFRLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxhQUFhLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7QUFFOUQsaUdBQWlHO0FBQ2pHLE1BQU0sQ0FBQyxXQUFXLENBQUMsY0FBYyxFQUFFLEVBQUUsRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBRzNELFFBQVEsQ0FBQyxjQUFjLEVBQUU7SUFDckIsRUFBRSxDQUFFLDRCQUE0QixFQUFFLFVBQVMsSUFBSTtRQUMzQyxNQUFNLENBQUMsV0FBVyxDQUFDLGNBQWMsRUFBRSxrQkFBa0IsRUFBRSxVQUFTLEtBQUs7WUFDakUsS0FBSyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDekIsSUFBSSxFQUFFLENBQUM7UUFDWCxDQUFDLENBQUMsQ0FBQTtJQUNOLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDLENBQUMiLCJmaWxlIjoiZGlzdC90ZXN0L3JlYWRtZV9vcmRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRISVMgSVMgQVVUTyBHRU5FUkFURUQgVEVTVCBDT0RFLCBETyBOT1QgTU9ESUZZIERJUkVDVExZXG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvc2hvdWxkLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL21vY2hhLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL25vZGUuZC50c1wiIC8+XG5yZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKCk7XG5yZXF1aXJlKFwic2hvdWxkXCIpO1xuXG4vKipcbiAqIEFuIElsbGlzdHJhdGlvbiBvZiB0aGUgb3JkZXIgb2Ygb3BlcmF0aW9ucyBvZlxuICAgQXguY3JlYXRlKCkgIC8vIGJlZ2luIGFuIG5ldyBhbmltYXRpb24gdHJlZVxuICAuc3Ryb2tlU3R5bGUoXCJncmVlblwiKSAvLyB0b3Agb2YgYW5pbWF0aW9uIHRyZWUgdGhlIHN0eWxlIGlzIHNldCB0byBncmVlblxuICAucGFycmFsbGVsKFtcbiAgICBBeC5jcmVhdGUoKS5zdHJva2UoKSAvLyBzdHJva2UgZ3JlZW4sIGRvd25zdHJlYW0gb2YgcGFycmFsbGVsXG4gICAgQXguY3JlYXRlKCkuc3Ryb2tlU3R5bGUoXCJyZWRcIikuc3Ryb2tlKCksIC8vc3Ryb2tlIHJlZFxuICAgIEF4LmNyZWF0ZSgpLnN0cm9rZSgpIC8vIHN0cm9rZSBncmVlbiwgbm90IGFmZmVjdGVkIGJ5IHJlZCBzaWJsaW5nXG4gIF0pXG4gIC5zdHJva2UoKSAvLyBzdHJva2UgZ3JlZW4sIGRvd25zdHJlYW0gb2YgcGFycmFsbGVsIHdoaWNoIGlzIGRvd25zdHJlYW0gb2YgdG9wXG5dKVxuICovXG5cblxuaW1wb3J0ICogYXMgUnggZnJvbSBcInJ4XCI7XG5pbXBvcnQgKiBhcyBBeCBmcm9tIFwiLi4vc3JjL2FuaW1heGVcIjtcbmltcG9ydCAqIGFzIGhlbHBlciBmcm9tIFwiLi4vc3JjL2hlbHBlclwiO1xuaW1wb3J0ICogYXMgZXZlbnRzIGZyb20gXCIuLi9zcmMvZXZlbnRzXCI7XG5pbXBvcnQgKiBhcyBQYXJhbWV0ZXIgZnJvbSBcIi4uL3NyYy9QYXJhbWV0ZXJcIjtcblxudmFyIGFuaW1hdG9yOiBBeC5BbmltYXRvciA9IGhlbHBlci5nZXRFeGFtcGxlQW5pbWF0b3IoKTtcblxuZnVuY3Rpb24gZmxvd05vZGUocG9zOiBbbnVtYmVyLCBudW1iZXJdLCBsYWJlbDogc3RyaW5nLCBpZDogbnVtYmVyLCBhY3RpdmU6IFBhcmFtZXRlci5QYXJhbWV0ZXI8bnVtYmVyPik6IEF4Lk9wZXJhdGlvbiB7IC8vd2UgY291bGQgYmUgY2xldmVyIGFuZCBsZXQgc3BhcmsgdGFrZSBhIHNlcSwgYnV0IHVzZXIgZnVuY3Rpb25zIHNob3VsZCBiZSBzaW1wbGVcbiAgICByZXR1cm4gQXguY3JlYXRlKClcbn1cbi8vZWFjaCBmcmFtZSwgZmlyc3QgZHJhdyBibGFjayBiYWNrZ3JvdW5kIHRvIGVyYXNlIHRoZSBwcmV2aW91cyBjb250ZW50c1xuYW5pbWF0b3IucGxheShBeC5jcmVhdGUoKS5maWxsU3R5bGUoXCIjMDAwMDAwXCIpLmZpbGxSZWN0KFswLDBdLFsxMDAsMTAwXSkpO1xuXG52YXIgdGltZWxpbmUgPSBcbiAgICBQYXJhbWV0ZXIuY29uc3RhbnQoMSkudGFrZSgxKS50aGVuKFxuICAgICAgICBQYXJhbWV0ZXIuY29uc3RhbnQoMSkudGFrZSgyKSAgICBcbiAgICApXG4gICAgXG4vLyBtb3ZlIHRoZSBkcmF3aW5nIGNvbnRleHQgZnJhbWUgb2YgcmVmZXJlbmNlIHRvIHRoZSBjZW50ZXIgKDUwLDUwKSBhbmQgdGhlbiBtb3ZlIGl0IGJ5IGEgK3ZlIHggdmVsb2NpdHksXG4vLyBzbyB0aGUgZnJhbWUgb2YgcmVmZXJlbmNlIG1vdmVzIG92ZXIgdGltZS5cbi8vIHRoZW4gZHJhdyBvdXIgMiBmcmFtZSBzcGFyayBhbmltYXRpb24gaW4gYSBsb29wIHNvIGl0IGRyYXdzIGZvcmV2ZXJcbmFuaW1hdG9yLnBsYXkoZmxvd05vZGUoWzUwLCA1MF0sIFwiQXguY3JlYXRlKClcIiwgMCwgdGltZWxpbmUpKTtcblxuLy8gdGhlIGhlbHBlciBmdW5jdGlvbiBwaXBlcyBpbmplY3RzIHRoZSBjb250ZXh0LCBlaXRoZXIgZnJvbSBhIHdlYiBjYW52YXMgb3IgYSBmYWtlIG5vZGUuanMgb25lLlxuaGVscGVyLnBsYXlFeGFtcGxlKFwicmVhZG1lX29yZGVyXCIsIDIwLCBhbmltYXRvciwgMTAwLCAxMDApO1xuXG5cbmRlc2NyaWJlKCdyZWFkbWVfb3JkZXInLCBmdW5jdGlvbiAoKSB7XG4gICAgaXQgKCdzaG91bGQgbWF0Y2ggdGhlIHJlZmVyZW5jZScsIGZ1bmN0aW9uKGRvbmUpIHtcbiAgICAgICAgaGVscGVyLnNhbWVFeGFtcGxlKFwicmVhZG1lX29yZGVyXCIsIFwicmVhZG1lX29yZGVyLXJlZlwiLCBmdW5jdGlvbihlcXVhbCkge1xuICAgICAgICAgICAgZXF1YWwuc2hvdWxkLmVxdWFsKHRydWUpO1xuICAgICAgICAgICAgZG9uZSgpO1xuICAgICAgICB9KVxuICAgIH0pO1xufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
