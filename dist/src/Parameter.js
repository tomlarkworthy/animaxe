function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var seedrandom = require("seedrandom");
var OT = require("./ObservableTransformer");
var zip = require("./zip");
exports.DEBUG = true;
var types = require("./types");
__export(require("./types"));
if (exports.DEBUG)
    console.log("Parameter: module loading...");
//console.log("seed random", seedrandom)
exports.rndGenerator = seedrandom.xor4096();
// Parameter is a transformer from (clock signals -> Value)
/**
 * convert an Rx.Observable into a Parameter by providing an initial value. The Parameter's value will update its value
 * every time and event is received from the Rx source
 */
function updateFrom(initialValue, source) {
    if (exports.DEBUG)
        console.log("updateFrom: build");
    return new Parameter(function () {
        if (exports.DEBUG)
            console.log("updateFrom: init");
        var value = initialValue;
        source.subscribe(function (x) { return value = x; });
        return function (clock) {
            return value;
        };
    });
}
exports.updateFrom = updateFrom;
/**
 * convert an Rx.Observable into a Parameter by providing an default value. The Parameter's value will be replaced
 * with the value from the provided Rx.Observable for one tick only
 */
function overwriteWith(defaultValue, source) {
    if (exports.DEBUG)
        console.log("overwriteWith: build");
    return new Parameter(function () {
        if (exports.DEBUG)
            console.log("overwriteWith: init");
        var value = defaultValue;
        source.subscribe(function (x) { return value = x; });
        return function (clock) {
            var returnValue = value;
            value = defaultValue; // reset value each time
            return returnValue;
        };
    });
}
exports.overwriteWith = overwriteWith;
/*
first(): Parameter<Value> {
        var self = this;
        return new Parameter<Value>(
            () => {
                var generate = true;
                var next = self.init();
                var value = null;
                return function (clock: number) {
                    if (generate) {
                        generate = false;
                        value = next(clock);
                    }
                    // console.log("fixed: val from parameter", value);
                    return value;
                }
            }
        );
    }
    */
function from(source) {
    types.assert(source != undefined, "source is not defined");
    if (exports.DEBUG)
        console.log("from: build");
    if (typeof source.attach == 'function')
        return source;
    else
        return constant(source);
}
exports.from = from;
function point(x, y) {
    if (exports.DEBUG)
        console.log("point: build");
    return OT.ObservableTransformer.merge2(from(x), from(y), function () {
        if (exports.DEBUG)
            console.log("point: init");
        return function (x, y) { return [x, y]; };
    });
}
exports.point = point;
function displaceT(displacement, value) {
    if (exports.DEBUG)
        console.log("displaceT: build");
    return new OT.ObservableTransformer(function (upstream) {
        var clockSkew = zip.zip(function (tick, dt) {
            console.log("displaceT", tick.clock, dt);
            return new OT.BaseTick(tick.clock + dt, tick.dt, tick.ctx);
        }, upstream, from(displacement).attach(upstream));
        return from(value).attach(clockSkew);
    });
}
exports.displaceT = displaceT;
/*
    RGB between 0 and 255
    a between 0 - 1 (1 is opaque, 0 is transparent)
 */
function rgba(r, g, b, a) {
    if (exports.DEBUG)
        console.log("rgba: build");
    return OT.ObservableTransformer.merge4(from(r), from(g), from(b), from(a), function () {
        if (exports.DEBUG)
            console.log("rgba: init");
        return function (r, g, b, a) {
            var val = "rgba(" + Math.floor(r) + "," + Math.floor(g) + "," + Math.floor(b) + "," + a + ")";
            if (exports.DEBUG)
                console.log("rgba: ", val);
            return val;
        };
    });
}
exports.rgba = rgba;
function hsl(h, s, l) {
    if (exports.DEBUG)
        console.log("hsl: build");
    return new Parameter(function () {
        var h_next = from(h).init();
        var s_next = from(s).init();
        var l_next = from(l).init();
        return function (t) {
            var h_val = Math.floor(h_next(t));
            var s_val = Math.floor(s_next(t));
            var l_val = Math.floor(l_next(t));
            var val = "hsl(" + h_val + "," + s_val + "%," + l_val + "%)";
            // if (DEBUG) console.log("hsl: ", val);
            return val;
        };
    });
}
exports.hsl = hsl;
function seedrnd(seed) {
    if (exports.DEBUG)
        console.log("seedrnd: build");
    return new Parameter(function () {
        var seed_next = from(seed).init();
        return function (t) {
            exports.rndGenerator = seedrandom.xor4096(seed_next(t));
            return;
        };
    });
}
exports.seedrnd = seedrnd;
function rnd() {
    if (exports.DEBUG)
        console.log("rnd: build");
    return new Parameter(function () { return function (t) {
        return exports.rndGenerator();
    }; });
}
exports.rnd = rnd;
function constant(val) {
    if (exports.DEBUG)
        console.log("constant: build");
    return new OT.ObservableTransformer(function (upstream) { return upstream.map(function (x) { return val; }); });
}
exports.constant = constant;
function rndNormal(scale) {
    if (scale === void 0) { scale = 1; }
    if (exports.DEBUG)
        console.log("rndNormal: build");
    return new Parameter(function () {
        if (exports.DEBUG)
            console.log("rndNormal: init");
        var scale_next = from(scale).init();
        return function (t) {
            var scale = scale_next(t);
            // generate random numbers
            var norm2 = 100;
            while (norm2 > 1) {
                var x = (exports.rndGenerator() - 0.5) * 2;
                var y = (exports.rndGenerator() - 0.5) * 2;
                norm2 = x * x + y * y;
            }
            var norm = Math.sqrt(norm2);
            var val = [scale * x / norm, scale * y / norm];
            if (exports.DEBUG)
                console.log("rndNormal: val", val);
            return val;
        };
    });
}
exports.rndNormal = rndNormal;
//todo: should be t as a parameter to a non tempor
function sin(x) {
    if (exports.DEBUG)
        console.log("sin: build");
    return from(x).map(function (x) { return Math.sin(x); });
}
exports.sin = sin;
function cos(x) {
    if (exports.DEBUG)
        console.log("cos: build");
    return from(x).map(function (x) { return Math.cos(x); });
}
exports.cos = cos;
function t() {
    if (exports.DEBUG)
        console.log("t: build");
    return new OT.ObservableTransformer(function (upstream) { return upstream.map(function (tick) { return tick.clock; }); });
}
exports.t = t;
if (exports.DEBUG)
    console.log("Parameter: module loaded");

//# sourceMappingURL=data:application/json;base64,
