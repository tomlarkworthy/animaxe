var utils = require("./utils");
var Rx = require("rx");
function falseFactory() { return false; }
function emptyArrayFactory() { return []; }
function notEmpty(x) { return x.length > 0; }
function shiftEach(x) { return x.shift(); }
function emptyAndDone(qd) { return qd[0].length == 0 && qd[1] === true; }
function notTheSame(i) {
    return function (x, j) {
        return j !== i;
    };
}
function zipArrays(arrays) {
    return arrays[0].map(function (_, i) {
        return arrays.map(function (array) { return array[i]; });
    });
}
var ZipObservable = (function () {
    function ZipObservable(observer, sources, resultSelector) {
        this.observer = observer;
        this.sources = sources;
        this.resultSelector = resultSelector;
        // console.log("ZipObservable"); 
        var n = this.sources.length;
        var done = utils.arrayInitialize(n, falseFactory);
        var q = utils.arrayInitialize(n, emptyArrayFactory);
        this.subscriptions = new Array(n);
        for (var i = 0; i < n; i++) {
            var source = this.sources[i];
            var subscriber = new ZipObserver(observer, i, this, q, done);
            this.subscriptions[i] = source.subscribe(subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.completed.bind(subscriber));
        }
    }
    ZipObservable.prototype.dispose = function () {
        for (var i = 0; i < this.sources.length; i++) {
            this.subscriptions[i].dispose();
        }
    };
    return ZipObservable;
})();
var errorObject = { value: null };
function tryCatch(fn, ctx, args) {
    try {
        return fn.apply(ctx, args);
    }
    catch (e) {
        errorObject.value = e;
        return errorObject;
    }
}
var ZipObserver = (function () {
    function ZipObserver(o, i, p, q, d) {
        this._o = o;
        this._i = i;
        this._p = p;
        this._q = q;
        this._d = d;
    }
    ZipObserver.prototype.next = function (x) {
        //console.log("ZipObserver: next", this);
        this._q[this._i].push(x);
        if (this._q.every(notEmpty)) {
            var queuedValues = this._q.map(shiftEach);
            var res = tryCatch(this._p.resultSelector, null, queuedValues);
            if (res === errorObject) {
                this._o.onError(res.value);
            }
            else {
                this._o.onNext(res);
                // Any done and empty => zip completed.
                if (zipArrays([this._q, this._d]).some(emptyAndDone)) {
                    this._o.onCompleted();
                }
            }
        }
    };
    ;
    ZipObserver.prototype.error = function (e) {
        this._o.onError(e);
    };
    ;
    ZipObserver.prototype.completed = function () {
        this._d[this._i] = true; // Done...
        if (this._q[this._i].length == 0) {
            this._o.onCompleted();
        }
    };
    ;
    return ZipObserver;
})();
/**
 * Merges the specified observable sequences into one observable sequence by using the selector function whenever all of the observable sequences or an array have produced an element at a corresponding index.
 * The last element in the arguments must be a function to invoke for each series of elements at corresponding indexes in the args.
 * @returns {Observable} An observable sequence containing the result of combining elements of the args using the specified result selector function.
 */
function zip(resultSelector) {
    var sources = [];
    for (var _a = 1; _a < arguments.length; _a++) {
        sources[_a - 1] = arguments[_a];
    }
    return Rx.Observable.create(function (observer) {
        var zipper = new ZipObservable(observer, sources, resultSelector);
        return zipper.dispose.bind(zipper);
    });
}
exports.zip = zip;
;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy96aXAudHMiXSwibmFtZXMiOlsiZmFsc2VGYWN0b3J5IiwiZW1wdHlBcnJheUZhY3RvcnkiLCJub3RFbXB0eSIsInNoaWZ0RWFjaCIsImVtcHR5QW5kRG9uZSIsIm5vdFRoZVNhbWUiLCJ6aXBBcnJheXMiLCJaaXBPYnNlcnZhYmxlIiwiWmlwT2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciIsIlppcE9ic2VydmFibGUuZGlzcG9zZSIsInRyeUNhdGNoIiwiWmlwT2JzZXJ2ZXIiLCJaaXBPYnNlcnZlci5jb25zdHJ1Y3RvciIsIlppcE9ic2VydmVyLm5leHQiLCJaaXBPYnNlcnZlci5lcnJvciIsIlppcE9ic2VydmVyLmNvbXBsZXRlZCIsInppcCJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBWSxLQUFLLFdBQU0sU0FDdkIsQ0FBQyxDQUQrQjtBQUNoQyxJQUFZLEVBQUUsV0FBTSxJQUVwQixDQUFDLENBRnVCO0FBRXhCLDBCQUEwQkEsTUFBTUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7QUFDekMsK0JBQStCQyxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUMzQyxrQkFBa0IsQ0FBQyxJQUFJQyxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUM3QyxtQkFBbUIsQ0FBQyxJQUFJQyxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUMzQyxzQkFBc0IsRUFBRSxJQUFJQyxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxLQUFLQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtBQUN6RSxvQkFBb0IsQ0FBQztJQUNuQkMsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7UUFDbkIsTUFBTSxD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QSxDQUFDQSxDQUFDQTtRQUNOQSxXQUFXQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN0QkEsTUFBTUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7SUFDdkJBLENBQUNBO0FBQ0xBLENBQUNBO0FBRUQ7SUFNSUMscUJBQVlBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBO1FBQ3ZCQyxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNaQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNaQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNaQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNaQSxJQUFJQSxDQUFDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtJQUNkQSxDQUFDQTtJQUVERCwwQkFBSUEsR0FBSkEsVUFBS0EsQ0FBQ0E7UUFDSkUseUNBQXlDQTtRQUN6Q0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDekJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQzVCQSxJQUFJQSxZQUFZQSxHQUFHQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQTtZQUMxQ0EsSUFBSUEsR0FBR0EsR0FBR0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsY0FBY0EsRUFBRUEsSUFBSUEsRUFBRUEsWUFBWUEsQ0FBQ0EsQ0FBQ0E7WUFFL0RBLEVBQUVBLENBQUNBLENBQUNBLEdBQUdBLEtBQUtBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO2dCQUN0QkEsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7WUFDL0JBLENBQUNBO1lBQUNBLElBQUlBLENBQUNBLENBQUNBO2dCQUNKQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDcEJBLHVDQUF1Q0E7Z0JBQ3ZDQSxFQUFFQSxDQUFDQSxDQUFDQSxTQUFTQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxFQUFFQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtvQkFDbkRBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBO2dCQUMxQkEsQ0FBQ0E7WUFDTEEsQ0FBQ0E7UUFDSEEsQ0FBQ0E7SUFDSEEsQ0FBQ0E7O0lBRURGLDJCQUFLQSxHQUFMQSxVQUFNQSxDQUFDQTtRQUNMRyxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUNyQkEsQ0FBQ0E7O0lBRURILCtCQUFTQSxHQUFUQTtRQUNFSSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxDQUFDQSxVQUFVQTtRQUNuQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsTUFBTUEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLFdBQVdBLEVBQUVBLENBQUNBO1FBQ3hCQSxDQUFDQTtJQUNIQSxDQUFDQTs7SUFDTEosa0JBQUNBO0FBQURBLENBM0NBLEFBMkNDQSxJQUFBO0FBQ0M7Ozs7R0FJRztBQUNMLGFBQ0UsY0FBOEM7SUFDOUNLLGlCQUFnQ0E7U0FBaENBLFdBQWdDQSxDQUFoQ0Esc0JBQWdDQSxDQUFoQ0EsSUFBZ0NBO1FBQWhDQSxnQ0FBZ0NBOztJQUNoQ0EsTUFBTUEsQ0FBbUJBLEVBQUVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQzNDQSxVQUFBQSxRQUFRQTtRQUNOQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxhQUFhQSxDQUFDQSxRQUFRQSxFQUFFQSxPQUFPQSxFQUFFQSxjQUFjQSxDQUFDQSxDQUFBQTtRQUNqRUEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDckNBLENBQUNBLENBQ0ZBLENBQUNBO0FBQ0pBLENBQUNBO0FBVGUsV0FBRyxNQVNsQixDQUFBO0FBQUEsQ0FBQyIsImZpbGUiOiJzcmMvemlwLmpzIiwic291cmNlc0NvbnRlbnQiOltudWxsXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
