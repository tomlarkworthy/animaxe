var parser = require('../peg/svg');
var Parameter = require('./Parameter');
var DEBUG = true;
function svgpath(before, svg) {
    var args = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
    }
    var ast = parser.parse(svg);
    if (DEBUG)
        console.log('SVG AST', ast);
    // turn the array of commands into a list of chainable animation functions
    var commands = ast.map(function (command) {
        return function (acc) {
            var op;
            var end;
            var x, y, x1, y1, x2, y2, rx, ry, largeArc, sweep, xAxisRotation;
            function bind(command) {
                if (typeof command === 'string') {
                    if (command[0] == '%') {
                        var index = parseFloat(command.slice(1)) - 1; // %1 means arg 0
                        var arg = args[index];
                        if (args === undefined)
                            throw new Error("Index out of bounds");
                        return arg;
                    }
                    else {
                        throw new Error(command);
                    }
                }
                else {
                    return command;
                }
            }
            function add(a, b) {
                return Parameter.from(a).combine(function () { return function (a, b) { return a + b; }; }, Parameter.from(b));
            }
            if (command.relative) {
                if (command.x != undefined)
                    x = add(bind(command.x), acc.end[0]);
                if (command.y != undefined)
                    y = add(bind(command.y), acc.end[1]);
                if (command.x1 != undefined)
                    x1 = add(bind(command.x1), acc.end[0]);
                if (command.y1 != undefined)
                    y1 = add(bind(command.y1), acc.end[1]);
                if (command.x2 != undefined)
                    x2 = add(bind(command.x2), acc.end[0]);
                if (command.y2 != undefined)
                    y2 = add(bind(command.y2), acc.end[1]);
            }
            else {
                if (command.x != undefined)
                    x = bind(command.x);
                if (command.y != undefined)
                    y = bind(command.y);
                if (command.x1 != undefined)
                    x1 = bind(command.x1);
                if (command.y1 != undefined)
                    y1 = bind(command.y1);
                if (command.x2 != undefined)
                    x2 = bind(command.x2);
                if (command.y2 != undefined)
                    y2 = bind(command.y2);
            }
            if (command.largeArc != undefined)
                largeArc = command.largeArc;
            if (command.sweep != undefined)
                sweep = command.sweep;
            if (command.rx != undefined)
                rx = bind(command.rx);
            if (command.ry != undefined)
                ry = bind(command.ry);
            if (command.xAxisRotation != undefined)
                xAxisRotation = bind(command.xAxisRotation);
            if (command.command == 'moveto') {
                op = acc.operation.moveTo(Parameter.point(x, y));
                end = [x, y];
            }
            else if (command.command == 'lineto') {
                op = acc.operation.lineTo(Parameter.point(x, y));
                end = [x, y];
            }
            else if (command.command == 'vertical lineto') {
                console.log("acc.end[0]", acc.end[0]);
                console.log("y", y);
                op = acc.operation.lineTo(Parameter.point(acc.end[0], y));
                end = [acc.end[0], y];
            }
            else if (command.command == 'horizontal lineto') {
                op = acc.operation.lineTo(Parameter.point(x, acc.end[1]));
                end = [x, acc.end[1]];
            }
            else if (command.command == 'closepath') {
                op = acc.operation.closePath();
            }
            else if (command.command == 'curveto') {
                op = acc.operation.bezierCurveTo(Parameter.point(x1, y1), Parameter.point(x2, y2), Parameter.point(x, y));
                end = [x, y];
            }
            else if (command.command == 'quadratic curveto') {
                op = acc.operation.quadraticCurveTo(Parameter.point(x1, y1), Parameter.point(x, y));
                end = [x, y];
            }
            else if (command.command == 'elliptical arc') {
                // 50 50 0 1 1 0 200
                // we only have arcTo and arc to draw an ellipse
                // arcTo([tx1, ty1], [tx2, ty2], radius), only does short lines
                // arc(cx, cy, radius, startAngle, endAngle, counterclockwise), where x and y must be end of current path
                // which draws a circular arc
                // so we rescale the canvas to create an elliptical rotated arc
                // command:'elliptical arc', rx:5, ry:5, xAxisRotation:45, largeArc:true, sweep:false, x:40, y:20 }
                // ellipticArc([rx, ry], [x, y], [LA, SW])
                // https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes
                // F.6.5 Conversion from endpoint to center parameterization
                op = acc.operation.ellipticArcTo(Parameter.point(acc.end[0], acc.end[1]), Parameter.point(rx, ry), xAxisRotation, command.largeArc, command.sweep, Parameter.point(x, y));
                end = [x, y];
            }
            else {
                throw Error("unrecognised command: " + command.command + " in svg path " + svg);
            }
            return { end: end, operation: op };
        };
    });
    var intialState = { 'end': [0, 0], 'operation': before };
    if (DEBUG)
        console.log(commands);
    // perform the actual chaining on top of the base case
    return commands.reduce(function (acc, chain) {
        return chain(acc);
    }, intialState).operation;
}
exports.svgpath = svgpath;

//# sourceMappingURL=data:application/json;base64,
