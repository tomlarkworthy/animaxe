/// <reference path="../node_modules/rx/ts/rx.all.d.ts" />
/// <reference path="../types/node.d.ts" />
/// <reference path="../types/should.d.ts" />
var Ax = require("../src/animaxe");
var Rx = require("rx");
function getExampleAnimator(width, height) {
    if (width === void 0) { width = 100; }
    if (height === void 0) { height = 100; }
    try {
        // In a browser environment, find a canvas
        var canvas = document.getElementById("canvas");
        console.log("browser", canvas);
        var context = canvas.getContext('2d');
        var animator = new Ax.Animator(context);
        animator.registerEvents(canvas);
        return animator;
    }
    catch (err) {
        console.log("error, so assuming we are in node environment", err);
        // in a node.js environment, load a fake canvas
        console.log(err);
        var Canvas = require('canvas');
        var canvas = new Canvas(width, height);
        console.log("node", canvas);
        var context = canvas.getContext('2d');
        return new Ax.Animator(context);
    }
}
exports.getExampleAnimator = getExampleAnimator;
function playExample(name, frames, animator, width, height) {
    try {
        //browser
        var time;
        var render = function () {
            window.requestAnimationFrame(render);
            var now = new Date().getTime(), dt = now - (time || now);
            time = now;
            animator.tick(dt * 0.001);
        };
        render();
    }
    catch (err) {
        console.log("error, so assuming we are in node environment", err);
        //node.js
        animator.play(Ax.save(width, height, "images/" + name + ".gif"));
        animator.ticker(Rx.Observable.return(0.1).repeat(frames));
    }
}
exports.playExample = playExample;
function sameExample(name, ref, cb) {
    try {
        throw new Error("not implemented");
    }
    catch (err) {
        //node.js
        var cmp = require("file-compare");
        var file1 = "images/" + name + ".gif";
        var file2 = "images/" + ref + ".gif";
        return cmp.compare(file1, file2, cb);
    }
}
exports.sameExample = sameExample;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlci50cyJdLCJuYW1lcyI6WyJnZXRFeGFtcGxlQW5pbWF0b3IiLCJwbGF5RXhhbXBsZSIsInNhbWVFeGFtcGxlIl0sIm1hcHBpbmdzIjoiQUFBQSwwREFBMEQ7QUFDMUQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUU3QyxJQUFPLEVBQUUsV0FBVyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sRUFBRSxXQUFXLElBQUksQ0FBQyxDQUFDO0FBRTFCLDRCQUFtQyxLQUFtQixFQUFFLE1BQW9CO0lBQXpDQSxxQkFBbUJBLEdBQW5CQSxXQUFtQkE7SUFBRUEsc0JBQW9CQSxHQUFwQkEsWUFBb0JBO0lBQ3hFQSxJQUFJQSxDQUFDQTtRQUNEQSwwQ0FBMENBO1FBQzFDQSxJQUFJQSxNQUFNQSxHQUFPQSxRQUFRQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUNuREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLElBQUlBLE9BQU9BLEdBQTZCQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNoRUEsSUFBSUEsUUFBUUEsR0FBSUEsSUFBSUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFFekNBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ2hDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtJQUNwQkEsQ0FBRUE7SUFBQUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDWEEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsK0NBQStDQSxFQUFFQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNsRUEsK0NBQStDQTtRQUMvQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDakJBLElBQUlBLE1BQU1BLEdBQUdBLE9BQU9BLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1FBQy9CQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxNQUFNQSxDQUFDQSxLQUFLQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUN2Q0EsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsTUFBTUEsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFNUJBLElBQUlBLE9BQU9BLEdBQTZCQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNoRUEsTUFBTUEsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7SUFDcENBLENBQUNBO0FBQ0xBLENBQUNBO0FBckJlLDBCQUFrQixxQkFxQmpDLENBQUE7QUFFRCxxQkFBNEIsSUFBWSxFQUFFLE1BQWMsRUFBRSxRQUFxQixFQUFFLEtBQWUsRUFBRSxNQUFnQjtJQUM5R0MsSUFBSUEsQ0FBQ0E7UUFDREEsU0FBU0E7UUFDVEEsSUFBSUEsSUFBSUEsQ0FBQ0E7UUFDVEEsSUFBSUEsTUFBTUEsR0FBR0E7WUFDVCxNQUFNLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFDMUIsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztZQUM3QixJQUFJLEdBQUcsR0FBRyxDQUFDO1lBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDQTtRQUNGQSxNQUFNQSxFQUFFQSxDQUFDQTtJQUNiQSxDQUFFQTtJQUFBQSxLQUFLQSxDQUFBQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNWQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSwrQ0FBK0NBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2xFQSxTQUFTQTtRQUNUQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxFQUFFQSxNQUFNQSxFQUFFQSxTQUFTQSxHQUFHQSxJQUFJQSxHQUFHQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNqRUEsUUFBUUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDOURBLENBQUNBO0FBQ0xBLENBQUNBO0FBbEJlLG1CQUFXLGNBa0IxQixDQUFBO0FBRUQscUJBQTRCLElBQVksRUFBRSxHQUFXLEVBQUUsRUFBcUI7SUFDeEVDLElBQUlBLENBQUNBO1FBQ0RBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7SUFDdkNBLENBQUVBO0lBQUFBLEtBQUtBLENBQUFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ1ZBLFNBQVNBO1FBQ1RBLElBQUlBLEdBQUdBLEdBQUdBLE9BQU9BLENBQUNBLGNBQWNBLENBQUNBLENBQUNBO1FBQ2xDQSxJQUFJQSxLQUFLQSxHQUFHQSxTQUFTQSxHQUFHQSxJQUFJQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUN0Q0EsSUFBSUEsS0FBS0EsR0FBR0EsU0FBU0EsR0FBR0EsR0FBR0EsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDckNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLE9BQU9BLENBQUNBLEtBQUtBLEVBQUVBLEtBQUtBLEVBQUVBLEVBQUVBLENBQUNBLENBQUNBO0lBQ3pDQSxDQUFDQTtBQUNMQSxDQUFDQTtBQVZlLG1CQUFXLGNBVTFCLENBQUEiLCJmaWxlIjoiaGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL25vZGVfbW9kdWxlcy9yeC90cy9yeC5hbGwuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvbm9kZS5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9zaG91bGQuZC50c1wiIC8+XG5cbmltcG9ydCBBeCA9IHJlcXVpcmUoXCIuLi9zcmMvYW5pbWF4ZVwiKTtcbmltcG9ydCBSeCA9IHJlcXVpcmUoXCJyeFwiKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4YW1wbGVBbmltYXRvcih3aWR0aDogbnVtYmVyID0gMTAwLCBoZWlnaHQ6IG51bWJlciA9IDEwMCk6IEF4LkFuaW1hdG9yIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBJbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQsIGZpbmQgYSBjYW52YXNcbiAgICAgICAgdmFyIGNhbnZhczphbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJicm93c2VyXCIsIGNhbnZhcyk7XG4gICAgICAgIHZhciBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgdmFyIGFuaW1hdG9yID0gIG5ldyBBeC5BbmltYXRvcihjb250ZXh0KTtcblxuICAgICAgICBhbmltYXRvci5yZWdpc3RlckV2ZW50cyhjYW52YXMpO1xuICAgICAgICByZXR1cm4gYW5pbWF0b3I7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IsIHNvIGFzc3VtaW5nIHdlIGFyZSBpbiBub2RlIGVudmlyb25tZW50XCIsIGVycik7XG4gICAgICAgIC8vIGluIGEgbm9kZS5qcyBlbnZpcm9ubWVudCwgbG9hZCBhIGZha2UgY2FudmFzXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIHZhciBDYW52YXMgPSByZXF1aXJlKCdjYW52YXMnKTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IG5ldyBDYW52YXMod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibm9kZVwiLCBjYW52YXMpO1xuXG4gICAgICAgIHZhciBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgcmV0dXJuIG5ldyBBeC5BbmltYXRvcihjb250ZXh0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwbGF5RXhhbXBsZShuYW1lOiBzdHJpbmcsIGZyYW1lczogbnVtYmVyLCBhbmltYXRvcjogQXguQW5pbWF0b3IsIHdpZHRoID86IG51bWJlciwgaGVpZ2h0ID86IG51bWJlcikge1xuICAgIHRyeSB7XG4gICAgICAgIC8vYnJvd3NlclxuICAgICAgICB2YXIgdGltZTtcbiAgICAgICAgdmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZShyZW5kZXIpO1xuICAgICAgICAgICAgdmFyIG5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxuICAgICAgICAgICAgICAgIGR0ID0gbm93IC0gKHRpbWUgfHwgbm93KTtcbiAgICAgICAgICAgIHRpbWUgPSBub3c7XG4gICAgICAgICAgICBhbmltYXRvci50aWNrKGR0KjAuMDAxKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVuZGVyKCk7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgY29uc29sZS5sb2coXCJlcnJvciwgc28gYXNzdW1pbmcgd2UgYXJlIGluIG5vZGUgZW52aXJvbm1lbnRcIiwgZXJyKTtcbiAgICAgICAgLy9ub2RlLmpzXG4gICAgICAgIGFuaW1hdG9yLnBsYXkoQXguc2F2ZSh3aWR0aCwgaGVpZ2h0LCBcImltYWdlcy9cIiArIG5hbWUgKyBcIi5naWZcIikpO1xuICAgICAgICBhbmltYXRvci50aWNrZXIoUnguT2JzZXJ2YWJsZS5yZXR1cm4oMC4xKS5yZXBlYXQoZnJhbWVzKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2FtZUV4YW1wbGUobmFtZTogc3RyaW5nLCByZWY6IHN0cmluZywgY2I6IChib29sZWFuKSA9PiB2b2lkKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwibm90IGltcGxlbWVudGVkXCIpO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIC8vbm9kZS5qc1xuICAgICAgICB2YXIgY21wID0gcmVxdWlyZShcImZpbGUtY29tcGFyZVwiKTtcbiAgICAgICAgdmFyIGZpbGUxID0gXCJpbWFnZXMvXCIgKyBuYW1lICsgXCIuZ2lmXCI7XG4gICAgICAgIHZhciBmaWxlMiA9IFwiaW1hZ2VzL1wiICsgcmVmICsgXCIuZ2lmXCI7XG4gICAgICAgIHJldHVybiBjbXAuY29tcGFyZShmaWxlMSwgZmlsZTIsIGNiKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
