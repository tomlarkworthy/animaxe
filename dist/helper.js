/// <reference path="../node_modules/rx/ts/rx.all.d.ts" />
/// <reference path="../types/node.d.ts" />
/// <reference path="../types/should.d.ts" />
var Ax = require("../src/animaxe");
var Rx = require("rx");
function getExampleAnimator(width, height) {
    if (width === void 0) { width = 100; }
    if (height === void 0) { height = 100; }
    try {
        // In a browser environment, find a canvas
        var canvas = document.getElementById("canvas");
        console.log("browser", canvas);
    }
    catch (err) {
        // in a node.js environment, load a fake canvas
        console.log(err);
        var Canvas = require('canvas');
        var canvas = new Canvas(width, height);
        console.log("node", canvas);
    }
    var context = canvas.getContext('2d');
    return new Ax.Animator(context);
}
exports.getExampleAnimator = getExampleAnimator;
function playExample(name, frames, animator, width, height) {
    try {
        //browser
        var offset = new Date().getTime();
        var time;
        var render = function () {
            window.requestAnimationFrame(render);
            var now = new Date().getTime(), dt = now - (time || now);
            time = now;
            animator.root.onNext(new Ax.Tick(animator.ctx, (time - offset) * 0.001, dt * 0.001, null));
        };
        render();
    }
    catch (err) {
        //node.js
        animator.play(Ax.save(width, height, "images/" + name + ".gif"));
        animator.ticker(Rx.Observable.return(0.1).repeat(frames));
    }
}
exports.playExample = playExample;
function sameExample(name, ref, cb) {
    try {
        throw new Error("not implemented");
    }
    catch (err) {
        //node.js
        var cmp = require("file-compare");
        var file1 = "images/" + name + ".gif";
        var file2 = "images/" + ref + ".gif";
        return cmp.compare(file1, file2, cb);
    }
}
exports.sameExample = sameExample;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlci50cyJdLCJuYW1lcyI6WyJnZXRFeGFtcGxlQW5pbWF0b3IiLCJwbGF5RXhhbXBsZSIsInNhbWVFeGFtcGxlIl0sIm1hcHBpbmdzIjoiQUFBQSwwREFBMEQ7QUFDMUQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUU3QyxJQUFPLEVBQUUsV0FBVyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sRUFBRSxXQUFXLElBQUksQ0FBQyxDQUFDO0FBRTFCLDRCQUFtQyxLQUFtQixFQUFFLE1BQW9CO0lBQXpDQSxxQkFBbUJBLEdBQW5CQSxXQUFtQkE7SUFBRUEsc0JBQW9CQSxHQUFwQkEsWUFBb0JBO0lBQ3hFQSxJQUFJQSxDQUFDQTtRQUNEQSwwQ0FBMENBO1FBQzFDQSxJQUFJQSxNQUFNQSxHQUFPQSxRQUFRQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUNuREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUVBO0lBQUFBLEtBQUtBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ1hBLCtDQUErQ0E7UUFDL0NBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pCQSxJQUFJQSxNQUFNQSxHQUFHQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUMvQkEsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDdkNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVEQSxJQUFJQSxPQUFPQSxHQUE2QkEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDaEVBLE1BQU1BLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO0FBQ3BDQSxDQUFDQTtBQWZlLDBCQUFrQixxQkFlakMsQ0FBQTtBQUVELHFCQUE0QixJQUFZLEVBQUUsTUFBYyxFQUFFLFFBQXFCLEVBQUUsS0FBZSxFQUFFLE1BQWdCO0lBQzlHQyxJQUFJQSxDQUFDQTtRQUNEQSxTQUFTQTtRQUNUQSxJQUFJQSxNQUFNQSxHQUFHQSxJQUFJQSxJQUFJQSxFQUFFQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUNsQ0EsSUFBSUEsSUFBSUEsQ0FBQ0E7UUFDVEEsSUFBSUEsTUFBTUEsR0FBR0E7WUFDVCxNQUFNLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsSUFBSSxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsRUFDMUIsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsQ0FBQztZQUM3QixJQUFJLEdBQUcsR0FBRyxDQUFDO1lBQ1gsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLEdBQUMsS0FBSyxFQUFFLEVBQUUsR0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzRixDQUFDLENBQUNBO1FBQ0ZBLE1BQU1BLEVBQUVBLENBQUNBO0lBQ2JBLENBQUVBO0lBQUFBLEtBQUtBLENBQUFBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ1ZBLFNBQVNBO1FBQ1RBLFFBQVFBLENBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLEVBQUVBLE1BQU1BLEVBQUVBLFNBQVNBLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO1FBQ2pFQSxRQUFRQSxDQUFDQSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQSxVQUFVQSxDQUFDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtJQUM5REEsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFsQmUsbUJBQVcsY0FrQjFCLENBQUE7QUFFRCxxQkFBNEIsSUFBWSxFQUFFLEdBQVcsRUFBRSxFQUFxQjtJQUN4RUMsSUFBSUEsQ0FBQ0E7UUFDREEsTUFBTUEsSUFBSUEsS0FBS0EsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxDQUFDQTtJQUN2Q0EsQ0FBRUE7SUFBQUEsS0FBS0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDVkEsU0FBU0E7UUFDVEEsSUFBSUEsR0FBR0EsR0FBR0EsT0FBT0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0E7UUFDbENBLElBQUlBLEtBQUtBLEdBQUdBLFNBQVNBLEdBQUdBLElBQUlBLEdBQUdBLE1BQU1BLENBQUNBO1FBQ3RDQSxJQUFJQSxLQUFLQSxHQUFHQSxTQUFTQSxHQUFHQSxHQUFHQSxHQUFHQSxNQUFNQSxDQUFDQTtRQUNyQ0EsTUFBTUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsS0FBS0EsRUFBRUEsS0FBS0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7SUFDekNBLENBQUNBO0FBQ0xBLENBQUNBO0FBVmUsbUJBQVcsY0FVMUIsQ0FBQSIsImZpbGUiOiJoZWxwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vbm9kZV9tb2R1bGVzL3J4L3RzL3J4LmFsbC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9ub2RlLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL3Nob3VsZC5kLnRzXCIgLz5cblxuaW1wb3J0IEF4ID0gcmVxdWlyZShcIi4uL3NyYy9hbmltYXhlXCIpO1xuaW1wb3J0IFJ4ID0gcmVxdWlyZShcInJ4XCIpO1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhhbXBsZUFuaW1hdG9yKHdpZHRoOiBudW1iZXIgPSAxMDAsIGhlaWdodDogbnVtYmVyID0gMTAwKTogQXguQW5pbWF0b3Ige1xuICAgIHRyeSB7XG4gICAgICAgIC8vIEluIGEgYnJvd3NlciBlbnZpcm9ubWVudCwgZmluZCBhIGNhbnZhc1xuICAgICAgICB2YXIgY2FudmFzOmFueSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiY2FudmFzXCIpO1xuICAgICAgICBjb25zb2xlLmxvZyhcImJyb3dzZXJcIiwgY2FudmFzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gaW4gYSBub2RlLmpzIGVudmlyb25tZW50LCBsb2FkIGEgZmFrZSBjYW52YXNcbiAgICAgICAgY29uc29sZS5sb2coZXJyKTtcbiAgICAgICAgdmFyIENhbnZhcyA9IHJlcXVpcmUoJ2NhbnZhcycpO1xuICAgICAgICB2YXIgY2FudmFzID0gbmV3IENhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgY29uc29sZS5sb2coXCJub2RlXCIsIGNhbnZhcyk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnRleHQ6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIHJldHVybiBuZXcgQXguQW5pbWF0b3IoY29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwbGF5RXhhbXBsZShuYW1lOiBzdHJpbmcsIGZyYW1lczogbnVtYmVyLCBhbmltYXRvcjogQXguQW5pbWF0b3IsIHdpZHRoID86IG51bWJlciwgaGVpZ2h0ID86IG51bWJlcikge1xuICAgIHRyeSB7XG4gICAgICAgIC8vYnJvd3NlclxuICAgICAgICB2YXIgb2Zmc2V0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgICAgIHZhciB0aW1lO1xuICAgICAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgZHQgPSBub3cgLSAodGltZSB8fCBub3cpO1xuICAgICAgICAgICAgdGltZSA9IG5vdztcbiAgICAgICAgICAgIGFuaW1hdG9yLnJvb3Qub25OZXh0KG5ldyBBeC5UaWNrKGFuaW1hdG9yLmN0eCwgKHRpbWUgLSBvZmZzZXQpKjAuMDAxLCBkdCowLjAwMSwgbnVsbCkpO1xuICAgICAgICB9O1xuICAgICAgICByZW5kZXIoKTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAvL25vZGUuanNcbiAgICAgICAgYW5pbWF0b3IucGxheShBeC5zYXZlKHdpZHRoLCBoZWlnaHQsIFwiaW1hZ2VzL1wiICsgbmFtZSArIFwiLmdpZlwiKSk7XG4gICAgICAgIGFuaW1hdG9yLnRpY2tlcihSeC5PYnNlcnZhYmxlLnJldHVybigwLjEpLnJlcGVhdChmcmFtZXMpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW1lRXhhbXBsZShuYW1lOiBzdHJpbmcsIHJlZjogc3RyaW5nLCBjYjogKGJvb2xlYW4pID0+IHZvaWQpIHtcbiAgICB0cnkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgLy9ub2RlLmpzXG4gICAgICAgIHZhciBjbXAgPSByZXF1aXJlKFwiZmlsZS1jb21wYXJlXCIpO1xuICAgICAgICB2YXIgZmlsZTEgPSBcImltYWdlcy9cIiArIG5hbWUgKyBcIi5naWZcIjtcbiAgICAgICAgdmFyIGZpbGUyID0gXCJpbWFnZXMvXCIgKyByZWYgKyBcIi5naWZcIjtcbiAgICAgICAgcmV0dXJuIGNtcC5jb21wYXJlKGZpbGUxLCBmaWxlMiwgY2IpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
