/// <reference path="../node_modules/rx/ts/rx.all.d.ts" />
/// <reference path="../types/node.d.ts" />
/// <reference path="../types/should.d.ts" />
var Ax = require("../src/animaxe");
var Rx = require("rx");
function getExampleAnimator(width, height) {
    if (width === void 0) { width = 100; }
    if (height === void 0) { height = 100; }
    try {
        // In a browser environment, find a canvas
        var canvas = document.getElementById("canvas");
        console.log("browser", canvas);
        var context = canvas.getContext('2d');
        require('ctx-get-transform')(context); //monkey patch context to get transform tracking
        var animator = new Ax.Animator(context);
        animator.registerEvents(canvas);
        return animator;
    }
    catch (err) {
        console.log("error, so assuming we are in node environment", err);
        // in a node.js environment, load a fake canvas
        console.log(err);
        var Canvas = require('canvas');
        var canvas = new Canvas(width, height);
        console.log("node", canvas);
        var context = canvas.getContext('2d');
        require('ctx-get-transform')(context); //monkey patch context to get transform tracking
        return new Ax.Animator(context);
    }
}
exports.getExampleAnimator = getExampleAnimator;
function playExample(name, frames, animator, width, height) {
    try {
        //browser
        var time;
        var render = function () {
            window.requestAnimationFrame(render);
            var now = new Date().getTime(), dt = now - (time || now);
            time = now;
            animator.tick(dt * 0.001);
        };
        render();
    }
    catch (err) {
        console.log("error, so assuming we are in node environment", err);
        //node.js
        animator.play(Ax.save(width, height, "images/" + name + ".gif"));
        animator.ticker(Rx.Observable.return(0.1).repeat(frames));
    }
}
exports.playExample = playExample;
function sameExample(name, ref, cb) {
    try {
        throw new Error("not implemented");
    }
    catch (err) {
        //node.js
        var cmp = require("file-compare");
        var file1 = "images/" + name + ".gif";
        var file2 = "images/" + ref + ".gif";
        return cmp.compare(file1, file2, cb);
    }
}
exports.sameExample = sameExample;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlci50cyJdLCJuYW1lcyI6WyJnZXRFeGFtcGxlQW5pbWF0b3IiLCJwbGF5RXhhbXBsZSIsInNhbWVFeGFtcGxlIl0sIm1hcHBpbmdzIjoiQUFBQSwwREFBMEQ7QUFDMUQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUU3QyxJQUFPLEVBQUUsV0FBVyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sRUFBRSxXQUFXLElBQUksQ0FBQyxDQUFDO0FBRTFCLDRCQUFtQyxLQUFtQixFQUFFLE1BQW9CO0lBQXpDQSxxQkFBbUJBLEdBQW5CQSxXQUFtQkE7SUFBRUEsc0JBQW9CQSxHQUFwQkEsWUFBb0JBO0lBQ3hFQSxJQUFJQSxDQUFDQTtRQUNEQSwwQ0FBMENBO1FBQzFDQSxJQUFJQSxNQUFNQSxHQUFPQSxRQUFRQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUNuREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLElBQUlBLE9BQU9BLEdBQTZCQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUVoRUEsT0FBT0EsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxnREFBZ0RBO1FBRXZGQSxJQUFJQSxRQUFRQSxHQUFJQSxJQUFJQSxFQUFFQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUV6Q0EsUUFBUUEsQ0FBQ0EsY0FBY0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDaENBLE1BQU1BLENBQUNBLFFBQVFBLENBQUNBO0lBQ3BCQSxDQUFFQTtJQUFBQSxLQUFLQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNYQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSwrQ0FBK0NBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2xFQSwrQ0FBK0NBO1FB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QkFBVyxjQVUxQixDQUFBIiwiZmlsZSI6ImhlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9ub2RlX21vZHVsZXMvcngvdHMvcnguYWxsLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL25vZGUuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvc2hvdWxkLmQudHNcIiAvPlxuXG5pbXBvcnQgQXggPSByZXF1aXJlKFwiLi4vc3JjL2FuaW1heGVcIik7XG5pbXBvcnQgUnggPSByZXF1aXJlKFwicnhcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeGFtcGxlQW5pbWF0b3Iod2lkdGg6IG51bWJlciA9IDEwMCwgaGVpZ2h0OiBudW1iZXIgPSAxMDApOiBBeC5BbmltYXRvciB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW4gYSBicm93c2VyIGVudmlyb25tZW50LCBmaW5kIGEgY2FudmFzXG4gICAgICAgIHZhciBjYW52YXM6YW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiYnJvd3NlclwiLCBjYW52YXMpO1xuICAgICAgICB2YXIgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cbiAgICAgICAgcmVxdWlyZSgnY3R4LWdldC10cmFuc2Zvcm0nKShjb250ZXh0KTsgLy9tb25rZXkgcGF0Y2ggY29udGV4dCB0byBnZXQgdHJhbnNmb3JtIHRyYWNraW5nXG5cbiAgICAgICAgdmFyIGFuaW1hdG9yID0gIG5ldyBBeC5BbmltYXRvcihjb250ZXh0KTtcblxuICAgICAgICBhbmltYXRvci5yZWdpc3RlckV2ZW50cyhjYW52YXMpO1xuICAgICAgICByZXR1cm4gYW5pbWF0b3I7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IsIHNvIGFzc3VtaW5nIHdlIGFyZSBpbiBub2RlIGVudmlyb25tZW50XCIsIGVycik7XG4gICAgICAgIC8vIGluIGEgbm9kZS5qcyBlbnZpcm9ubWVudCwgbG9hZCBhIGZha2UgY2FudmFzXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIHZhciBDYW52YXMgPSByZXF1aXJlKCdjYW52YXMnKTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IG5ldyBDYW52YXMod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibm9kZVwiLCBjYW52YXMpO1xuXG4gICAgICAgIHZhciBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgcmVxdWlyZSgnY3R4LWdldC10cmFuc2Zvcm0nKShjb250ZXh0KTsgLy9tb25rZXkgcGF0Y2ggY29udGV4dCB0byBnZXQgdHJhbnNmb3JtIHRyYWNraW5nXG4gICAgICAgIHJldHVybiBuZXcgQXguQW5pbWF0b3IoY29udGV4dCk7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcGxheUV4YW1wbGUobmFtZTogc3RyaW5nLCBmcmFtZXM6IG51bWJlciwgYW5pbWF0b3I6IEF4LkFuaW1hdG9yLCB3aWR0aCA/OiBudW1iZXIsIGhlaWdodCA/OiBudW1iZXIpIHtcbiAgICB0cnkge1xuICAgICAgICAvL2Jyb3dzZXJcbiAgICAgICAgdmFyIHRpbWU7XG4gICAgICAgIHZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICBkdCA9IG5vdyAtICh0aW1lIHx8IG5vdyk7XG4gICAgICAgICAgICB0aW1lID0gbm93O1xuICAgICAgICAgICAgYW5pbWF0b3IudGljayhkdCowLjAwMSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlbmRlcigpO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IsIHNvIGFzc3VtaW5nIHdlIGFyZSBpbiBub2RlIGVudmlyb25tZW50XCIsIGVycik7XG4gICAgICAgIC8vbm9kZS5qc1xuICAgICAgICBhbmltYXRvci5wbGF5KEF4LnNhdmUod2lkdGgsIGhlaWdodCwgXCJpbWFnZXMvXCIgKyBuYW1lICsgXCIuZ2lmXCIpKTtcbiAgICAgICAgYW5pbWF0b3IudGlja2VyKFJ4Lk9ic2VydmFibGUucmV0dXJuKDAuMSkucmVwZWF0KGZyYW1lcykpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhbWVFeGFtcGxlKG5hbWU6IHN0cmluZywgcmVmOiBzdHJpbmcsIGNiOiAoYm9vbGVhbikgPT4gdm9pZCkge1xuICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAvL25vZGUuanNcbiAgICAgICAgdmFyIGNtcCA9IHJlcXVpcmUoXCJmaWxlLWNvbXBhcmVcIik7XG4gICAgICAgIHZhciBmaWxlMSA9IFwiaW1hZ2VzL1wiICsgbmFtZSArIFwiLmdpZlwiO1xuICAgICAgICB2YXIgZmlsZTIgPSBcImltYWdlcy9cIiArIHJlZiArIFwiLmdpZlwiO1xuICAgICAgICByZXR1cm4gY21wLmNvbXBhcmUoZmlsZTEsIGZpbGUyLCBjYik7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
