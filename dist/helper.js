/// <reference path="../node_modules/rx/ts/rx.all.d.ts" />
/// <reference path="../types/node.d.ts" />
/// <reference path="../types/should.d.ts" />
var Rx = require("rx");
var Ax = require("./animaxe.ts");
//import * as transform_fix from 'ctx-get-transform-bugfix';
var transform_fix = require('ctx-get-transform');
function getExampleAnimator(width, height) {
    if (width === void 0) { width = 100; }
    if (height === void 0) { height = 100; }
    try {
        // In a browser environment, find a canvas
        var canvas = document.getElementById("canvas");
        console.log("browser", canvas);
        var context = canvas.getContext('2d');
        console.log(transform_fix);
        transform_fix(context); //monkey patch context to get transform tracking
        var animator = new Ax.Animator(context);
        animator.registerEvents(canvas);
        return animator;
    }
    catch (err) {
        console.log("error, so assuming we are in node environment", err);
        // in a node.js environment, load a fake canvas
        console.log(err);
        var Canvas = require('canvas');
        var canvas = new Canvas(width, height);
        console.log("node", canvas);
        var context = canvas.getContext('2d');
        require('ctx-get-transform-bugfix')(context); //monkey patch context to get transform tracking
        return new Ax.Animator(context);
    }
}
exports.getExampleAnimator = getExampleAnimator;
function playExample(name, frames, animator, width, height) {
    try {
        //browser
        var time;
        var render = function () {
            window.requestAnimationFrame(render);
            var now = new Date().getTime(), dt = now - (time || now);
            time = now;
            animator.tick(dt * 0.001);
        };
        render();
    }
    catch (err) {
        console.log("error, so assuming we are in node environment", err);
        //node.js
        animator.play(Ax.save(width, height, "images/" + name + ".gif"));
        animator.ticker(Rx.Observable.return(0.1).repeat(frames));
    }
}
exports.playExample = playExample;
function sameExample(name, ref, cb) {
    try {
        throw new Error("not implemented");
    }
    catch (err) {
        //node.js
        var cmp = require("file-compare");
        var file1 = "images/" + name + ".gif";
        var file2 = "images/" + ref + ".gif";
        return cmp.compare(file1, file2, cb);
    }
}
exports.sameExample = sameExample;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlci50cyJdLCJuYW1lcyI6WyJnZXRFeGFtcGxlQW5pbWF0b3IiLCJwbGF5RXhhbXBsZSIsInNhbWVFeGFtcGxlIl0sIm1hcHBpbmdzIjoiQUFBQSwwREFBMEQ7QUFDMUQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUU3QyxJQUFZLEVBQUUsV0FBTSxJQUFJLENBQUMsQ0FBQTtBQUN6QixJQUFZLEVBQUUsV0FBTSxjQUFjLENBQUMsQ0FBQTtBQUNuQyw0REFBNEQ7QUFDNUQsSUFBSSxhQUFhLEdBQUcsT0FBTyxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFakQsNEJBQW1DLEtBQW1CLEVBQUUsTUFBb0I7SUFBekNBLHFCQUFtQkEsR0FBbkJBLFdBQW1CQTtJQUFFQSxzQkFBb0JBLEdBQXBCQSxZQUFvQkE7SUFDeEVBLElBQUlBLENBQUNBO1FBQ0RBLDBDQUEwQ0E7UUFDMUNBLElBQUlBLE1BQU1BLEdBQU9BLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1FBQ25EQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxTQUFTQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUMvQkEsSUFBSUEsT0FBT0EsR0FBNkJBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBRWhFQSxPQUFPQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUMzQkEsYUFBYUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsZ0RBQWdEQTtRQUV4RUEsSUFBSUEsUUFBUUEsR0FBSUEsSUFBSUEsRUFBRUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFFekNBLFFBQVFBLENBQUNBLGNBQWNBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBO1FBQ2hDQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtJQUNwQkEsQ0FBRUE7SUFBQUEsS0FBS0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FB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Q0EsT0FBT0EsQ0FBQ0EsS0FBS0EsRUFBRUEsS0FBS0EsRUFBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0E7SUFDekNBLENBQUNBO0FBQ0xBLENBQUNBO0FBVmUsbUJBQVcsY0FVMUIsQ0FBQSIsImZpbGUiOiJoZWxwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vbm9kZV9tb2R1bGVzL3J4L3RzL3J4LmFsbC5kLnRzXCIgLz5cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi90eXBlcy9ub2RlLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL3Nob3VsZC5kLnRzXCIgLz5cblxuaW1wb3J0ICogYXMgUnggZnJvbSBcInJ4XCI7XG5pbXBvcnQgKiBhcyBBeCBmcm9tIFwiLi9hbmltYXhlLnRzXCI7XG4vL2ltcG9ydCAqIGFzIHRyYW5zZm9ybV9maXggZnJvbSAnY3R4LWdldC10cmFuc2Zvcm0tYnVnZml4JztcbnZhciB0cmFuc2Zvcm1fZml4ID0gcmVxdWlyZSgnY3R4LWdldC10cmFuc2Zvcm0nKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEV4YW1wbGVBbmltYXRvcih3aWR0aDogbnVtYmVyID0gMTAwLCBoZWlnaHQ6IG51bWJlciA9IDEwMCk6IEF4LkFuaW1hdG9yIHtcbiAgICB0cnkge1xuICAgICAgICAvLyBJbiBhIGJyb3dzZXIgZW52aXJvbm1lbnQsIGZpbmQgYSBjYW52YXNcbiAgICAgICAgdmFyIGNhbnZhczphbnkgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNhbnZhc1wiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJicm93c2VyXCIsIGNhbnZhcyk7XG4gICAgICAgIHZhciBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICAgICAgICBjb25zb2xlLmxvZyh0cmFuc2Zvcm1fZml4KTtcbiAgICAgICAgdHJhbnNmb3JtX2ZpeChjb250ZXh0KTsgLy9tb25rZXkgcGF0Y2ggY29udGV4dCB0byBnZXQgdHJhbnNmb3JtIHRyYWNraW5nXG5cbiAgICAgICAgdmFyIGFuaW1hdG9yID0gIG5ldyBBeC5BbmltYXRvcihjb250ZXh0KTtcblxuICAgICAgICBhbmltYXRvci5yZWdpc3RlckV2ZW50cyhjYW52YXMpO1xuICAgICAgICByZXR1cm4gYW5pbWF0b3I7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiZXJyb3IsIHNvIGFzc3VtaW5nIHdlIGFyZSBpbiBub2RlIGVudmlyb25tZW50XCIsIGVycik7XG4gICAgICAgIC8vIGluIGEgbm9kZS5qcyBlbnZpcm9ubWVudCwgbG9hZCBhIGZha2UgY2FudmFzXG4gICAgICAgIGNvbnNvbGUubG9nKGVycik7XG4gICAgICAgIHZhciBDYW52YXMgPSByZXF1aXJlKCdjYW52YXMnKTtcbiAgICAgICAgdmFyIGNhbnZhcyA9IG5ldyBDYW52YXMod2lkdGgsIGhlaWdodCk7XG4gICAgICAgIGNvbnNvbGUubG9nKFwibm9kZVwiLCBjYW52YXMpO1xuXG4gICAgICAgIHZhciBjb250ZXh0OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICAgICAgcmVxdWlyZSgnY3R4LWdldC10cmFuc2Zvcm0tYnVnZml4JykoY29udGV4dCk7IC8vbW9ua2V5IHBhdGNoIGNvbnRleHQgdG8gZ2V0IHRyYW5zZm9ybSB0cmFja2luZ1xuICAgICAgICByZXR1cm4gbmV3IEF4LkFuaW1hdG9yKGNvbnRleHQpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBsYXlFeGFtcGxlKG5hbWU6IHN0cmluZywgZnJhbWVzOiBudW1iZXIsIGFuaW1hdG9yOiBBeC5BbmltYXRvciwgd2lkdGggPzogbnVtYmVyLCBoZWlnaHQgPzogbnVtYmVyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy9icm93c2VyXG4gICAgICAgIHZhciB0aW1lO1xuICAgICAgICB2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHJlbmRlcik7XG4gICAgICAgICAgICB2YXIgbm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgZHQgPSBub3cgLSAodGltZSB8fCBub3cpO1xuICAgICAgICAgICAgdGltZSA9IG5vdztcbiAgICAgICAgICAgIGFuaW1hdG9yLnRpY2soZHQqMC4wMDEpO1xuICAgICAgICB9O1xuICAgICAgICByZW5kZXIoKTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yLCBzbyBhc3N1bWluZyB3ZSBhcmUgaW4gbm9kZSBlbnZpcm9ubWVudFwiLCBlcnIpO1xuICAgICAgICAvL25vZGUuanNcbiAgICAgICAgYW5pbWF0b3IucGxheShBeC5zYXZlKHdpZHRoLCBoZWlnaHQsIFwiaW1hZ2VzL1wiICsgbmFtZSArIFwiLmdpZlwiKSk7XG4gICAgICAgIGFuaW1hdG9yLnRpY2tlcihSeC5PYnNlcnZhYmxlLnJldHVybigwLjEpLnJlcGVhdChmcmFtZXMpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzYW1lRXhhbXBsZShuYW1lOiBzdHJpbmcsIHJlZjogc3RyaW5nLCBjYjogKGJvb2xlYW4pID0+IHZvaWQpIHtcbiAgICB0cnkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJub3QgaW1wbGVtZW50ZWRcIik7XG4gICAgfSBjYXRjaChlcnIpIHtcbiAgICAgICAgLy9ub2RlLmpzXG4gICAgICAgIHZhciBjbXAgPSByZXF1aXJlKFwiZmlsZS1jb21wYXJlXCIpO1xuICAgICAgICB2YXIgZmlsZTEgPSBcImltYWdlcy9cIiArIG5hbWUgKyBcIi5naWZcIjtcbiAgICAgICAgdmFyIGZpbGUyID0gXCJpbWFnZXMvXCIgKyByZWYgKyBcIi5naWZcIjtcbiAgICAgICAgcmV0dXJuIGNtcC5jb21wYXJlKGZpbGUxLCBmaWxlMiwgY2IpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
