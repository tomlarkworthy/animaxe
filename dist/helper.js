/// <reference path="../node_modules/rx/ts/rx.all.d.ts" />
/// <reference path="../types/node.d.ts" />
/// <reference path="../types/should.d.ts" />
var Ax = require("../src/animaxe");
var Rx = require("rx");
function getExampleAnimator(width, height) {
    if (width === void 0) { width = 100; }
    if (height === void 0) { height = 100; }
    try {
        // In a browser environment, find a canvas
        var canvas = document.getElementById("canvas");
        console.log("browser", canvas);
    }
    catch (err) {
        console.log("error, so assuming we are in node environment", err);
        // in a node.js environment, load a fake canvas
        console.log(err);
        var Canvas = require('canvas');
        var canvas = new Canvas(width, height);
        console.log("node", canvas);
    }
    var context = canvas.getContext('2d');
    return new Ax.Animator(context);
}
exports.getExampleAnimator = getExampleAnimator;
function playExample(name, frames, animator, width, height) {
    try {
        //browser
        var offset = new Date().getTime();
        var time;
        var render = function () {
            window.requestAnimationFrame(render);
            var now = new Date().getTime(), dt = now - (time || now);
            time = now;
            animator.root.onNext(new Ax.Tick(animator.ctx, (time - offset) * 0.001, dt * 0.001, null));
        };
        render();
    }
    catch (err) {
        //node.js
        animator.play(Ax.save(width, height, "images/" + name + ".gif"));
        animator.ticker(Rx.Observable.return(0.1).repeat(frames));
    }
}
exports.playExample = playExample;
function sameExample(name, ref, cb) {
    try {
        throw new Error("not implemented");
    }
    catch (err) {
        //node.js
        var cmp = require("file-compare");
        var file1 = "images/" + name + ".gif";
        var file2 = "images/" + ref + ".gif";
        return cmp.compare(file1, file2, cb);
    }
}
exports.sameExample = sameExample;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImhlbHBlci50cyJdLCJuYW1lcyI6WyJnZXRFeGFtcGxlQW5pbWF0b3IiLCJwbGF5RXhhbXBsZSIsInNhbWVFeGFtcGxlIl0sIm1hcHBpbmdzIjoiQUFBQSwwREFBMEQ7QUFDMUQsMkNBQTJDO0FBQzNDLDZDQUE2QztBQUU3QyxJQUFPLEVBQUUsV0FBVyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3RDLElBQU8sRUFBRSxXQUFXLElBQUksQ0FBQyxDQUFDO0FBRTFCLDRCQUFtQyxLQUFtQixFQUFFLE1BQW9CO0lBQXpDQSxxQkFBbUJBLEdBQW5CQSxXQUFtQkE7SUFBRUEsc0JBQW9CQSxHQUFwQkEsWUFBb0JBO0lBQ3hFQSxJQUFJQSxDQUFDQTtRQUNEQSwwQ0FBMENBO1FBQzFDQSxJQUFJQSxNQUFNQSxHQUFPQSxRQUFRQSxDQUFDQSxjQUFjQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUNuREEsT0FBT0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsU0FBU0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUVBO0lBQUFBLEtBQUtBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ1hBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLCtDQUErQ0EsRUFBRUEsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDbEVBLCtDQUErQ0E7UUFDL0NBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2pCQSxJQUFJQSxNQUFNQSxHQUFHQSxPQUFPQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUMvQkEsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsTUFBTUEsQ0FBQ0EsS0FBS0EsRUFBRUEsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFDdkNBLE9BQU9BLENBQUNBLEdBQUdBLENBQUNBLE1BQU1BLEVBQUVBLE1BQU1BLENBQUNBLENBQUNBO0lBQ2hDQSxDQUFDQTtJQUVEQSxJQUFJQSxPQUFPQSxHQUE2QkEsTUFBTUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDaEVBLE1BQU1BLENBQUNBLElBQUlBLEVBQUVBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO0FBQ3BDQSxDQUFDQTtBQWhCZSwwQkFBa0IscUJBZ0JqQyxDQUFBO0FBRUQscUJBQTRCLElBQVksRUFBRSxNQUFjLEVBQUUsUUFBcUIsRUFBRSxLQUFlLEVBQUUsTUFBZ0I7SUFDOUdDLElBQUlBLENBQUNBO1FBQ0RBLFNBQVNBO1FBQ1RBLElBQUlBLE1BQU1BLEdBQUdBLElBQUlBLElBQUlBLEVBQUVBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ2xDQSxJQUFJQSxJQUFJQSxDQUFDQTtRQUNUQSxJQUFJQSxNQUFNQSxHQUFHQTtZQUNULE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNyQyxJQUFJLEdBQUcsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxFQUMxQixFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDO1lBQzdCLElBQUksR0FBRyxHQUFHLENBQUM7WUFDWCxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsR0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQzNGLENBQUMsQ0FBQ0E7UUFDRkEsTUFBTUEsRUFBRUEsQ0FBQ0E7SUFDYkEsQ0FBRUE7SUFBQUEsS0FBS0EsQ0FBQUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDVkEsU0FBU0E7UUFDVEEsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsRUFBRUEsTUFBTUEsRUFBRUEsU0FBU0EsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDakVBLFFBQVFBLENBQUNBLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBLFVBQVVBLENBQUNBLE1BQU1BLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBO0lBQzlEQSxDQUFDQTtBQUNMQSxDQUFDQTtBQWxCZSxtQkFBVyxjQWtCMUIsQ0FBQTtBQUVELHFCQUE0QixJQUFZLEVBQUUsR0FBVyxFQUFFLEVBQXFCO0lBQ3hFQyxJQUFJQSxDQUFDQTtRQUNEQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBO0lBQ3ZDQSxDQUFFQTtJQUFBQSxLQUFLQSxDQUFBQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUNWQSxTQUFTQTtRQUNUQSxJQUFJQSxHQUFHQSxHQUFHQSxPQUFPQSxDQUFDQSxjQUFjQSxDQUFDQSxDQUFDQTtRQUNsQ0EsSUFBSUEsS0FBS0EsR0FBR0EsU0FBU0EsR0FBR0EsSUFBSUEsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDdENBLElBQUlBLEtBQUtBLEdBQUdBLFNBQVNBLEdBQUdBLEdBQUdBLEdBQUdBLE1BQU1BLENBQUNBO1FBQ3JDQSxNQUFNQSxDQUFDQSxHQUFHQSxDQUFDQSxPQUFPQSxDQUFDQSxLQUFLQSxFQUFFQSxLQUFLQSxFQUFFQSxFQUFFQSxDQUFDQSxDQUFDQTtJQUN6Q0EsQ0FBQ0E7QUFDTEEsQ0FBQ0E7QUFWZSxtQkFBVyxjQVUxQixDQUFBIiwiZmlsZSI6ImhlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuLi9ub2RlX21vZHVsZXMvcngvdHMvcnguYWxsLmQudHNcIiAvPlxuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4uL3R5cGVzL25vZGUuZC50c1wiIC8+XG4vLy8gPHJlZmVyZW5jZSBwYXRoPVwiLi4vdHlwZXMvc2hvdWxkLmQudHNcIiAvPlxuXG5pbXBvcnQgQXggPSByZXF1aXJlKFwiLi4vc3JjL2FuaW1heGVcIik7XG5pbXBvcnQgUnggPSByZXF1aXJlKFwicnhcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRFeGFtcGxlQW5pbWF0b3Iod2lkdGg6IG51bWJlciA9IDEwMCwgaGVpZ2h0OiBudW1iZXIgPSAxMDApOiBBeC5BbmltYXRvciB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW4gYSBicm93c2VyIGVudmlyb25tZW50LCBmaW5kIGEgY2FudmFzXG4gICAgICAgIHZhciBjYW52YXM6YW55ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiYnJvd3NlclwiLCBjYW52YXMpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBjb25zb2xlLmxvZyhcImVycm9yLCBzbyBhc3N1bWluZyB3ZSBhcmUgaW4gbm9kZSBlbnZpcm9ubWVudFwiLCBlcnIpO1xuICAgICAgICAvLyBpbiBhIG5vZGUuanMgZW52aXJvbm1lbnQsIGxvYWQgYSBmYWtlIGNhbnZhc1xuICAgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuICAgICAgICB2YXIgQ2FudmFzID0gcmVxdWlyZSgnY2FudmFzJyk7XG4gICAgICAgIHZhciBjYW52YXMgPSBuZXcgQ2FudmFzKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIm5vZGVcIiwgY2FudmFzKTtcbiAgICB9XG5cbiAgICB2YXIgY29udGV4dDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgcmV0dXJuIG5ldyBBeC5BbmltYXRvcihjb250ZXh0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBsYXlFeGFtcGxlKG5hbWU6IHN0cmluZywgZnJhbWVzOiBudW1iZXIsIGFuaW1hdG9yOiBBeC5BbmltYXRvciwgd2lkdGggPzogbnVtYmVyLCBoZWlnaHQgPzogbnVtYmVyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgLy9icm93c2VyXG4gICAgICAgIHZhciBvZmZzZXQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgICAgICAgdmFyIHRpbWU7XG4gICAgICAgIHZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUocmVuZGVyKTtcbiAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICBkdCA9IG5vdyAtICh0aW1lIHx8IG5vdyk7XG4gICAgICAgICAgICB0aW1lID0gbm93O1xuICAgICAgICAgICAgYW5pbWF0b3Iucm9vdC5vbk5leHQobmV3IEF4LlRpY2soYW5pbWF0b3IuY3R4LCAodGltZSAtIG9mZnNldCkqMC4wMDEsIGR0KjAuMDAxLCBudWxsKSk7XG4gICAgICAgIH07XG4gICAgICAgIHJlbmRlcigpO1xuICAgIH0gY2F0Y2goZXJyKSB7XG4gICAgICAgIC8vbm9kZS5qc1xuICAgICAgICBhbmltYXRvci5wbGF5KEF4LnNhdmUod2lkdGgsIGhlaWdodCwgXCJpbWFnZXMvXCIgKyBuYW1lICsgXCIuZ2lmXCIpKTtcbiAgICAgICAgYW5pbWF0b3IudGlja2VyKFJ4Lk9ic2VydmFibGUucmV0dXJuKDAuMSkucmVwZWF0KGZyYW1lcykpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNhbWVFeGFtcGxlKG5hbWU6IHN0cmluZywgcmVmOiBzdHJpbmcsIGNiOiAoYm9vbGVhbikgPT4gdm9pZCkge1xuICAgIHRyeSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm5vdCBpbXBsZW1lbnRlZFwiKTtcbiAgICB9IGNhdGNoKGVycikge1xuICAgICAgICAvL25vZGUuanNcbiAgICAgICAgdmFyIGNtcCA9IHJlcXVpcmUoXCJmaWxlLWNvbXBhcmVcIik7XG4gICAgICAgIHZhciBmaWxlMSA9IFwiaW1hZ2VzL1wiICsgbmFtZSArIFwiLmdpZlwiO1xuICAgICAgICB2YXIgZmlsZTIgPSBcImltYWdlcy9cIiArIHJlZiArIFwiLmdpZlwiO1xuICAgICAgICByZXR1cm4gY21wLmNvbXBhcmUoZmlsZTEsIGZpbGUyLCBjYik7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
