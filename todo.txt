// todo BUG TODO LIST

// Features

// Glow
    // different distance exponents are interesting
    // think about alpha over existing backgrounds

// Reflection
// L systems (fold?)
// simulate a lazer show, XY parametric functions (Lissajous curves), intergrate with ODE solver

// Deployment
//   - <script src=animaxe.js> ... var Ax = Ax() ; ... new Ax.Animator();
// REALITY:
// - we follow RxJS conventions, which means commonjs external modules
// - we need Ax to depend on Rx. Which suggests importing it as a module, however that does not work in browser.
// - External module typescript system a must, therefore webpack for browser usage
// - webpack standalone example works
// see http://codepen.io/tomlarkworthy/pen/jbmVWO


// Why we went with code pen
// - code pen sucks for syntax errors, and you have to declare the Ax module inline (though at least you can do this at the bottom)
// - however, even with strong compilation, the errors are not highlighted inline and are confusing
// - Playground-on-ace https://github.com/hi104/typescript-playground-on-ace does GREAT error reporting, but no sharing code :/
// - JSBin doesn't propogate type errors at all and is totally shit
// - JSFiddle doesn't read typescript
// - FORGET MAKING A TYPESCRIPT EDITOR, the raw JS is basically the same, and the definition file describes the API somewhat.



// Engineering

// figure out why example3 cannot have move than 1000 particles without a stack overflow
// fix test randomness with a random seed (seed random with animation seed?)
// replace parralel with its own internal animator OR make parrallel the only option
// change order of playExample parameters

* refactor
// (done) Parameter to go in own module, params chained to make value read left to right
// (done) Parameter.rnd().first()        // maybe we should just make it pure by seeding the rnd by epock or tree position?
// (done) Parameter.rnd().map(x => x*x)
// (done) Ax.Parameter() for construciton
// (partial) Make methods chain as an alternative to wrapping, e.g. Ax.move(...).velocity(...)
// add .pipe(animation) so users can chain themselves
// align names of methods with canvas context name, e.g. fillStyle(Color)
     - finish that API!
     - withinClip, withinTx, withinPath






// Marketing

// API documentation
Improve README.me
- method chaining
- lifecycle
- making your own Animation
- making your own Parameters
- overriding the prototype
- using .pipe()
- example of switching from the canvas API to a linear chain
- how a new chain resets the context

// website
// - npm
// - hosting

// Code pen example
// UI controls

// IDEAS

// PacMan
// what about a different way of making glow?
// render luminecence into a texture and then color based on distance from lightsource
// mouse input, tailing glow (rember to tween between rapid movements)
// offscreen rendering an playback
// sin wave, randomized
// GUI components, responsive, bootstrap
// get data out by tapping into flow (intercept(Subject passback))
// SVG import

