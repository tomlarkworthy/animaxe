// todo BUG TODO LIST

// Features

// Glow
    // different distance exponents are interesting
    // think about alpha over existing backgrounds

// Reflection
// L systems (fold?)
// simulate a lazer show, XY parametric functions (Lissajous curves), intergrate with ODE solver

// Deployment
// make it work with tsc and tsconfig.json
// webpack
// single.js file, works with node or browser (without a module loader?), a library written in typescript,
// which can be used for applications written in Javascript or Typescript.
// Browser, add animaxe.js to a script tag.
// EXAMPLES:
//   - <script src=animaxe.js> ... var Ax = Ax()[1] ; ... new Ax.Animator();
//   - /// path to types , import Ax = require("Ax");
// make it work with tcd
//   - http://www.jbrantly.com/typescript-and-webpack/
// REALITY:
// - we follow RxJS conventions, which means commonjs external modules
// - we need Ax to depend on Rx. Which suggests importing it as a module, however that does not work in browser.
// - External module typescript system a must, therefore webpack for browser usage
// - webpack standalone example works
// - however we want it as a library, see https://webpack.github.io/docs/library-and-externals.html

// Engineering

// figure out why example3 cannot have move than 1000 particles without a stack overflow
// fix test randomness with a random seed
// replace parralel with its own internal animator
// replace Ax.sin() with Ax.sin(Ax.t)
// extract color spaces into own file (rgba, hsl)
// change order of playExample parameters

// Marketing

// API documentation
// website
// codepen
// - browserify
// - npm
// - hosting



// IDEAS

// PacMan
// what about a different way of making glow?
// render luminecence into a texture and then color based on distance from lightsource
// mouse input, tailing glow (rember to tween between rapid movements)
// offscreen rendering an playback
// sin wave, randomized
// GUI components, responsive, bootstrap
// get data out by tapping into flow (intercept(Subject passback))
// SVG import
// layering with parrallel (back first)

